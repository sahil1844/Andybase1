<resources xmlns:tools="http://schemas.android.com/tools">
    <string name="app_name">AndyBase</string>
    <string name="introtitle">Introduction to Android</string>
    <string name="introduction_to_andybase_application">Introduction to AndyBase Application</string>
    <string name="intro_para">AndyBase is a comprehensive Android application crafted as a learning and reference tool for both novice and experienced Android developers. The application covers a wide array of fundamental and advanced topics essential for mastering Android development. From basic UI components to intricate system services, AndyBase provides hands-on demos and sample code snippets to facilitate a deeper understanding of each topic.</string>
    <string name="features_and_content">Features and Content</string>
    <string name="features_para">AndyBase encompasses all basic topics such as creating user interfaces with XML, handling user interactions, working with data storage options including SQLite and SharedPreferences, and managing app navigation with activities and fragments. Additionally, it delves into more advanced topics like integrating third-party libraries, implementing background services, managing network operations using Retrofit and Volley, and leveraging modern architecture components like ViewModel, LiveData, and Room.</string>
    <string name="Interactive_para">Each topic in AndyBase is accompanied by interactive demos that allow users to see the concepts in action. For instance, when learning about RecyclerViews, users can interact with a demo showcasing a list of items, complete with add, delete, and update functionalities. This hands-on approach ensures that users not only read about the concepts but also understand how to implement them in real-world scenarios.</string>
    <string name="demo_para">AndyBase provides clear and concise demo code for each topic. For example, the demo for implementing a RecyclerView includes code snippets for creating the adapter, defining the item layout, and managing the RecyclerView in the activity. Users can view, copy, and experiment with this code directly within the application, fostering a practical learning experience.</string>
    <string name="version_para">AndyBase is fully compatible with the latest versions of Android, ensuring users can learn and implement features using the most up-to-date APIs and development practices. The app is designed to work seamlessly on devices running Android 12 and beyond, incorporating modern development guidelines, such as the use of Jetpack libraries and adherence to Material Design principles. This ensures that users are equipped with the knowledge and skills to develop applications that perform optimally on the latest Android devices.</string>
    <string name="built_para">AndyBase is built using Java and XML, making it accessible to a wide range of developers. Java, being one of the most widely used programming languages for Android development, ensures that the code is easily understandable and maintainable. XML is used extensively for defining user interfaces, allowing for a clear separation of UI design and application logic. By leveraging Java and XML, AndyBase provides a familiar environment for developers to learn and experiment with Android development concepts effectively.</string>
    <string name="overall_para">AndyBase provides fundamental knowledge of Android development, including basic and advanced topics, with clear examples and corresponding outputs. This approach ensures users can easily understand and apply the concepts, making the learning process straightforward and effective.</string>
    <string name="history_para1">Android, an open-source operating system for mobile devices, has revolutionized the tech industry since its inception. Developed by Android Inc., a company co-founded by Andy Rubin, Rich Miner, Nick Sears, and Chris White in October 2003, Android aimed to create a more advanced operating system for digital cameras. However, the company soon shifted its focus to mobile handsets due to the market potential.</string>
    <string name="history_pare2">In July 2005, Google acquired Android Inc. for at least $50 million. Rubin, Miner, Sears, and White continued their work under Google umbrella. Google promoted the platform to handset manufacturers and carriers, promising a flexible and upgradeable system. The first public appearance of Android occurred in 2007 when the Open Handset Alliance, a consortium of tech companies including Google, announced the development of Android.</string>
    <string name="history_para3">The first commercially available smartphone running Android was the HTC Dream, also known as the T-Mobile G1, released in October 2008. This early version of Android included basic features like a web browser, email client, and YouTube player. The OS was designed to be open and customizable, which encouraged a vast community of developers to create applications.</string>
    <string name="history_para4">Android versions are named after sweets and desserts, a tradition that began with the 1.5 Cupcake release in April 2009. Each subsequent version brought significant improvements and new features, such as an on-screen keyboard in Cupcake, video recording capabilities in 1.6 Donut, and multi-touch support in 2.0 Eclair.</string>
    <string name="history_para5">Android quickly evolved, with major updates being released regularly. The 2.2 Froyo (2010) introduced features like USB tethering and Wi-Fi hotspot functionality. Version 2.3 Gingerbread (2010) refined the user interface and improved performance, while 3.0 Honeycomb (2011) was designed specifically for tablets, showcasing a redesigned UI and support for larger screens.</string>
    <string name="history_para6">In October 2011, Android 4.0 Ice Cream Sandwich unified the smartphone and tablet versions of the OS, bringing a sleek new design and improved functionality. The following year, Android 4.1 Jelly Bean introduced Project Butter, which significantly enhanced the touch response and user interface fluidity. Google Now, an intelligent personal assistant, was also launched with Jelly Bean.</string>
    <string name="history_para7">Subsequent versions continued to expand Android capabilities. Android 4.4 KitKat (2013) optimized performance for low-end devices, while Android 5.0 Lollipop (2014) introduced the Material Design language, giving the OS a modern and consistent look across devices. Android 6.0 Marshmallow (2015) brought enhanced permissions management and native support for fingerprint recognition.</string>
    <string name="history_para8">In 2016, Android 7.0 Nougat introduced split-screen multitasking and improved notifications. Android 8.0 Oreo (2017) focused on optimizing battery usage and improving device performance. Android 9.0 Pie (2018) embraced gesture navigation and adaptive battery features.</string>
    <string name="history_para9">Android 10, released in September 2019, marked a shift away from dessert names, focusing instead on a numeric naming scheme. It introduced system-wide dark mode, improved privacy controls, and a new gesture navigation system. Android 11 (2020) built upon these features with more privacy enhancements and improved device controls.</string>
    <string name="history_para10">The latest versions, Android 12 (2021) and Android 13 (2022), continued to refine the user experience. Android 12 introduced Material You, allowing users to personalize the interface look and feel, while Android 13 focused on improving connectivity, privacy, and performance.</string>
    <string name="history_para11">Android journey from a startup project to the world most widely used mobile operating system is marked by continuous innovation and adaptation. Its open-source nature and robust developer community have ensured a steady stream of applications and services, making it a versatile platform for smartphones, tablets, and a wide array of other devices. As Android continues to evolve, it remains at the forefront of mobile technology, shaping the future of how we interact with the digital world.</string>
    <string name="archi_para1">Applications is the top layer of android architecture. The pre-installed applications like home, contacts, camera, gallery etc and third party applications downloaded from the play store like chat applications, games etc. will be installed on this layer only. It runs within the Android run time with the help of the classes and services provided by the application framework.</string>
    <string name="archi_para2">Application Framework provides several important classes which are used to create an Android application. It provides a generic abstraction for hardware access and also helps in managing the user interface with application resources. Generally, it provides the services with the help of which we can create a particular class and make that class helpful for the Applications creation. It includes different types of services activity manager, notification manager, view system, package manager etc. which are helpful for the development of our application according to the prerequisite.</string>
    <string name="archi_para3">Android Runtime environment is one of the most important part of Android. It contains components like core libraries and the Dalvik virtual machine(DVM). Mainly, it provides the base for the application framework and powers our application with the help of the core libraries. Like Java Virtual Machine (JVM), Dalvik Virtual Machine (DVM) is a register-based virtual machine and specially designed and optimized for android to ensure that a device can run multiple instances efficiently. It depends on the layer Linux kernel for threading and low-level memory management. The core libraries enable us to implement android applications using the standard JAVA or Kotlin programming languages.\n\nNote: Now, starting from Android 5.0 and above, we use ART (Android Runtime) to compile bytecode into native code to leverage ahead-of-time compilation.</string>
    <string name="archi_para4">The Platform Libraries includes various C/C++ core libraries and Java based libraries such as Media, Graphics, Surface Manager, OpenGL etc. to provide a support for android development. \n\n● Media library provides support to play and record an audio and video formats. \n● Surface manager responsible for managing access to the display subsystem. \n● SGL and OpenGL both cross-language, cross-platform application program interface (API) are used for 2D and 3D computer graphics. \n● SQLite provides database support and FreeType provides font support. \n● Web-Kit This open source web browser engine provides all the functionality to display web content and to simplify page loading. \n● SSL (Secure Sockets Layer) is security technology to establish an encrypted link between a web server and a web browser.</string>
    <string name="archi_para5">Kernel is heart of the android architecture. It manages all the available drivers such as display drivers, camera drivers, Bluetooth drivers, audio drivers, memory drivers, etc. which are required during the runtime. The Linux Kernel will provide an abstraction layer between the device hardware and the other components of android architecture. It is responsible for management of memory, power, devices etc. The features of Linux kernel are: \n\n● Security: The Linux kernel handles the security between the application and the system. \n● Memory Management: It efficiently handles the memory management thereby providing the freedom to develop our apps. \n● Process Management: It manages the process well, allocates resources to processes whenever they need them. \n● Network Stack: It effectively handles the network communication. \n● Driver Model: It ensures that the application works properly on the device and hardware manufacturers responsible for building their drivers into the Linux build.</string>
    <string name="archi_para6">Android architecture contains different number of components to support any android device needs. Android software contains an open-source Linux Kernel having collection of number of C/C++ libraries which are exposed through an application framework services. Among all the components Linux Kernel provides main functionality of operating system functions to smartphones and Dalvik Virtual Machine (DVM) provide platform for running an android application. The main components of android architecture are following:-\n ● Applications\n ● Application Framework\n ● Android Runtime\n ● Platform Libraries\n ● Linux Kernel</string>
    <string name="struct_para1">Android Studio is the official IDE (Integrated Development Environment) developed by the JetBrains community which is freely provided by Google for android app development. After completing the setup of Android Architecture we can create an android application in the studio. We need to create a new project for each sample application and we should understand the folder structure. It looks like this:</string>
    <string name="struct_para2"><![CDATA[The android project contains different types of app modules, source code files, and resource files. We will explore all the folders and files in the android app. \n\n1. Manifests Folder \n2. Java Folder \n3. res (Resources) Folder \n ● Drawable Folder \n ● Layout Folder \n ● Mipmap Folder \n ● Values Folder \n4. Gradle Scripts</string>]]></string>
    <string name="struct_para3">AndroidManifest.xml is found in the Manifests folder and is used to create our Android application. This file includes details about our programme, including the version for Android, metadata, the Kotlin file states package, and other application components. It serves as a bridge between our application and the Android OS.\n\nFollowing is the manifests folder structure in the android application.</string>
    <string name="struct_para4"><![CDATA[AndroidManifest.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?> \n<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\' \nxmlns:tools=\'http://schemas.android.com/tools\'> \n<application \nandroid:allowBackup=\'true\' \nandroid:dataExtractionRules=\'@xml/data_extraction_rules\' \nandroid:fullBackupContent=\'@xml/backup_rules\' \nandroid:icon=\'@mipmap/ic_launcher\' \nandroid:label=\'AndyBase\' \nandroid:roundIcon=\'@mipmap/ic_launcher_round\' \nandroid:supportsRtl=\'true\' \nandroid:theme=\'@style/Theme.AndyBase\' \ntools:targetApi=\'31\'>\' \nandroid:textColor=\'@color/black\' \nandroid:textSize=\'14dp\' \nandroid:textStyle=\'bold\'/>]]></string>
    <string name="struct_para5">All of the Java and Kotlin source code (.java) files, along with additional Test files, that we generate while developing the app are stored in the Java folder. By default, the class file MainActivity.kt will automatically create under the package name \'package com.example.andybase;\' if we start a new Kotlin project, as demonstrated below.</string>
    <string name="struct_para6">The resource folder is the most crucial one since it holds all of the non-code resources for our Android application, such as XML layouts, photos, and UI strings.</string>
    <string name="struct_para7">The term Gradle refers to an automated build system, which is made up of several files that are used to provide a build configuration that is applicable to every module in our application. Buildscripts are found in build.gradle (Project), while plugins and implementations are found in build.gradle (Module), where configurations that are applicable to all of our application modules are built.</string>
    <string name="struct_para8">It contains the different types of images used for the development of the application. We need to add all the images in a drawable folder for the application development.</string>
    <string name="struct_para9">The layout folder contains all XML layout files which we used to define the user interface of our application. It contains the activity_main.xml file.</string>
    <string name="struct_para10"><![CDATA[<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <androidx.constraintlayout.widget.ConstraintLayout\n xmlns:android=\'http:// schemas.android.com/apk/res/android\'\n xmlns:app=\'http:// schemas.android.com/apk/res-auto\'\n xmlns:tools=\'http:// schemas.android.com/tools\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'\n tools:context=\'.MainActivity\'>\n <TextView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Hello World!\'\n app:layout_constraintBottom_toBottomOf=\'parent\'\n app:layout_constraintLeft_toLeftOf=\'parent\'\n app:layout_constraintRight_toRightOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\' />\n </androidx.constraintlayout.widget.ConstraintLayout>]]></string>
    <string name="struct_para11">This folder contains launcher.xml files to define icons that are used to show on the home screen. It contains different density types of icons depending upon the size of the device such as hdpi, mdpi, xhdpi.</string>
    <string name="struct_para12">Values folder contains a number of XML files like strings, dimensions, colors, and style definitions. One of the most important files is the strings.xml file which contains the resources. \n\nExample:</string>
    <string name="struct_para13"><![CDATA[<resources>\n <string name=\'app_name\'>NameOfTheApplication</string>\n <string name=\'checked\'>Checked</string>\n <string name=\'unchecked\'>Unchecked</string>\n </resources>]]></string>
    <string name="appfile_para1">It is very important to know about the basics of Android Studio’s file structure. In this article, some important files/folders, and their significance is explained for the easy understanding of the Android studio work environment.\n\nIn the below image, several important files are marked:</string>
    <string name="appfile_para2">AndroidManifest.xml is a crucial manifest file in every project, defining the application structure, metadata, components, and requirements. It includes nodes for Activities, Services, Content Providers, and Broadcast Receiver, coordinating with each other.\n\nA typical AndroidManifest.xml file looks like:</string>
    <string name="appfile_para3"><![CDATA[AndroidManifest.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?> \n<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\' \nxmlns:tools=\'http://schemas.android.com/tools\'> \n<application \nandroid:allowBackup=\'true\' \nandroid:dataExtractionRules=\'@xml/data_extraction_rules\' \nandroid:fullBackupContent=\'@xml/backup_rules\' \nandroid:icon=\'@mipmap/ic_launcher\' \nandroid:label=\'AndyBase\' \nandroid:roundIcon=\'@mipmap/ic_launcher_round\' \nandroid:supportsRtl=\'true\' \nandroid:theme=\'@style/Theme.AndyBase\' \ntools:targetApi=\'31\'>\' \nandroid:textColor=\'@color/black\' \nandroid:textSize=\'14dp\' \nandroid:textStyle=\'bold\'/>]]></string>
    <string name="appfile_para4">The Java source code files are located in the Java folder. These files serve as a controller for the layout file, or controlled user interface. It retrieves the data from the Layout file, processes it, and then displays the results in the UI layout. It functions on an Android application backend.</string>
    <string name="appfile_para5">A Drawable folder contains resource type file (something that can be drawn). Drawables may take a variety of file like Bitmap (PNG, JPEG), Nine Patch, Vector (XML), Shape, Layers, States, Levels, and Scale.</string>
    <string name="appfile_para6">A user interface (UI) visual structure, like that of an Android application, is defined by its layout. The Layout files written in XML are kept in this folder. Your layout file View hierarchy can be gradually built by adding more layout objects or widgets as child elements.\n\nHere an example layout file:</string>
    <string name="appfile_para7"><![CDATA[<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <LinearLayout xmlns:android=\'http://schemas.android.com/apk/res/android\' \nandroid:layout_width=\'match_parent\' \nandroid:layout_height=\'match_parent\' \nandroid:orientation=\'vertical\' > \n<TextView android:id=\'@+id/text\' \nandroid:layout_width=\'wrap_content\' \nandroid:layout_height=\'wrap_content\' \nandroid:text=\'Hello, I am a TextView\' /> \n<Button android:id=\'@+id/button\' \nandroid:layout_width=\'wrap_content\' \nandroid:layout_height=\'wrap_content\' \nandroid:text=\'Hello, I am a Button\' />\n </LinearLayout>]]></string>
    <string name="appfile_para8">The Image Asset file that can be used in the Android Studio application is located in the Mipmap folder. The following icon types can be generated: Notification icons, Action bar and tab icons, and Launcher icons.</string>
    <string name="appfile_para9">colors.xml file contains color resources of the Android application. Different color values are identified by a unique name that can be used in the Android application program.\nBelow is a sample colors.xml file:</string>
    <string name="appfile_para10"><![CDATA[<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <resources>\n <color name=\'colorPrimary\'>#3F51B5</color>\n <color name=\'colorPrimaryDark\'>#303F9F</color>\n <color name=\'colorAccent\'>#FF4081</color>\n </resources>]]></string>
    <string name="appfile_para11">The strings.xml file contains string resources of the Android application. The different string value is identified by a unique name that can be used in the Android application program. This file also stores string array by using XML language.\nBelow is a sample colors.xml file:</string>
    <string name="appfile_para12"><![CDATA[<resources> \n<string name=\'app_name\'>GeeksforGeeks</string> \n</resources>]]></string>
    <string name="appfile_para13">The styles.xml file contains resources of the theme style in the Android application. This file is written in XML language.\nBelow is a sample styles.xml file:</string>
    <string name="appfile_para14"><![CDATA[<resources> \n<style name=\'AppTheme\' parent=\'Theme.AppCompat.Light.DarkActionBar\'>\n <item name=\'colorPrimary\'>@color/colorPrimary</item>\n <item name=\'colorPrimaryDark\'>@color/colorPrimaryDark</item>\n <item name=\'colorAccent\'>@color/colorAccent</item>\n</style>\n</resources>]]></string>
    <string name="appfile_para15">This defines the module-specific build configurations. Here you can add dependencies what you need in your Android application.</string>
    <string name="appfile_para16">apply plugin: \'com.android.application\'\n android { \n compileSdkVersion 26\n defaultConfig { \n applicationId \'com.example.andybase\' \n minSdkVersion 16 \n targetSdkVersion 26 \n versionCode 1 \n versionName \'1.0\'\ntestInstrumentationRunner \'android.support.test.runner.AndroidJUnitRunner\'\n} \nbuildTypes { \n release { \n minifyEnabled false \n proguardFiles getDefaultProguardFile(\'proguard-android.txt\'), \'proguard-rules.pro\' \n } \n } \n }\n dependencies {\n implementation \'com.android.support.constraint:constraint-layout:1.0.2\'\n testImplementation \'junit:junit:4.12\'\n androidTestImplementation \'com.android.support.test:runner:0.5\'\n androidTestImplementation \'com.android.support.test.espresso:espresso-core:2.2.2\'\n }</string>
    <string name="manifest_para1">AndroidManifest.xml, the Manifest XML file found in the root directory of each Android project, is included in every Android project. Because it specifies our applications components, requirements, structure, and metadata, the manifest file is a crucial component of our software. Each Activity, Service, Content Provider, and Broadcast Receiver that makes up the application is represented by a node in this file, and their coordination with one another and other applications is determined by intent filters and permissions.\n\nThe application metadata, such as its icon, version number, themes, and so on, is also specified in the manifest file. Moreover, extra top-level nodes can define platform, hardware, and screen requirements as well as any necessary permissions and unit tests. A root manifest tag with a package attribute set to the projects package makes up the manifest. Additionally, it must have the xmls:android attribute, which will provide a number of system attributes that are used in the file. The current version of the application is defined using the versionCode attribute, which takes the form of an integer that increases with each iteration of the version owing to updates. Moreover, a public version that will be shown to users is specified using the versionName attribute.\n\nA typical manifest file looks as:</string>
    <string name="manifest_para2"><![CDATA[<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:tools=\'http://schemas.android.com/tools\'\n package=\'com.example.AndyBase\'\n android:versionCode=\'1\'\n android:versionName=\'1.0\'\n android:installLocation=\'preferExternal\'>\n <uses-sdk \n android:minSdkVersion=\'18\' \n android:targetSdkVersion=\'27\' />\n <application\n android:allowBackup=\'true\'\n android:dataExtractionRules=\'@xml/data_extraction_rules\'\n android:fullBackupContent=\'@xml/backup_rules\'\n android:icon=\'@mipmap/ic_launcher\'\n android:label=\'@string/app_name\'\n android:roundIcon=\'@mipmap/ic_launcher_round\'\n android:supportsRtl=\'true\'\n android:theme=\'@style/Theme.MyApplication\'\n tools:targetApi=\'31\'>\n <activity\n android:name=\'.MainActivity\'\n android:exported=\'true\'>\n <intent-filter>\n <action android:name=\'android.intent.action.MAIN\' />\n <category android:name=\'android.intent.category.LAUNCHER\' />\n </intent-filter>\n </activity>\n </application>\n </manifest>]]></string>
    <string name="manifest_para3"><![CDATA[The main component of the AndroidManifest.xml file is known as manifest. Additionally, the packaging field describes the activity class package name. It must contain an <application> element with the xmlns:android and package attribute specified.]]></string>
    <string name="manifest_para4"><![CDATA[<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:tools=\'http://schemas.android.com/tools\'\n package=\'com.example.AndyBase\'\n android:versionCode=\'1\'\n android:versionName=\'1.0\'\n android:installLocation=\'preferExternal\'>\n <application>\n </application>\n </manifest>]]></string>
    <string name="manifest_para6"><![CDATA[<uses-sdk android:minSdkVersion=\'18\' android:targetSdkVersion=\'27\' />]]></string>
    <string name="manifest_para5"><![CDATA[It is used to specify the target SDK, for which it has been designed, using a combination of minSdkVersion, maxSdkVersion, and targetSdkVersion attributes, and the minimum and maximum SDK version by means of an API Level integer that must be present on a device in order for our application to function properly. That is part of the <manifest> element.]]></string>
    <string name="manifest_para7"><![CDATA[It outlines a system permission that must be granted by the user for the app to function properly and is contained within the <manifest> element. When an application is installed (on Android 5.1 and lower devices or Android 6.0 and higher), the user must grant the application permissions.]]></string>
    <string name="manifest_para8"><![CDATA[<uses-permission android:name=\'android.permission.CAMERA\' android:maxSdkVersion=\'18\' />]]></string>
    <string name="manifest_para9">There can only be one application node in a manifest. It specifies your application metadata (such as its title, icon, and theme) using attributes. We should add a debuggable attribute to our builds during development, and we should make sure to disable it for release builds. This will allow debugging to occur. The Activity, Service, Content Provider, and Broadcast Receiver nodes that define the application components are also contained within the application node. It is possible to specify the name of our custom application class by using the android:name attribute.</string>
    <string name="manifest_para10"><![CDATA[<application\n android:name=\'.GeeksForGeeks\'\n android:allowBackup=\'true\'\n android:dataExtractionRules=\'@xml/data_extraction_rules\'\n android:fullBackupContent=\'@xml/backup_rules\'\n android:icon=\'@drawable/gfgIcon\'\n android:label=\'@string/app_name\'\n android:roundIcon=\'@mipmap/ic_launcher_round\'\n android:supportsRtl=\'true\'\n android:theme=\'@android:style/Theme.Light\'\n android:debuggable=\'true\'\n tools:targetApi=\'31\'>\n </application>]]></string>
    <string name="manifest_para11"><![CDATA[It defines a shared library against which the application must be linked. This element instructs the system to add the library’s code to the package’s class loader. It is contained within the <application> element.]]></string>
    <string name="manifest_para12"><![CDATA[<uses-library android:name=\'android.test.runner\' android:required=\'true\' />]]></string>
    <string name="manifest_para13"><![CDATA[The Activity sub-element of an application refers to an activity that needs to be specified in the AndroidManifest.xml file. It has various characteristics, like label, name, theme, launchMode, and others. In the manifest file, all elements must be represented by <activity>. Any activity that is not declared there won’t run and won’t be visible to the system. It is contained within the <application> element.]]></string>
    <string name="manifest_para14"><![CDATA[<activity android:name=\'.MainActivity\' android:exported=\'true\'> </activity>]]></string>
    <string name="manifest_para15"><![CDATA[It is the activity sub-element that indicates the kind of intent to which the broadcast receiver, service, or activity can respond. It lets the component to receive a specific kind of intent while removing those that aren\'t necessary for it. At least one <action> element must be present in the intent filter.]]></string>
    <string name="manifest_para16"><![CDATA[<intent-filter>\n <action android:name=\'android.intent.action.MAIN\'/>\n <category android:name=\'android.intent.category.LAUNCHER\' />\n </intent-filter>]]></string>
    <string name="manifest_para17"><![CDATA[It adds an action for the intent-filter. It is contained within the <intent-filter> element.]]></string>
    <string name="manifest_para18"><![CDATA[<action android:name=\'android.intent.action.MAIN\' />]]></string>
    <string name="manifest_para19"><![CDATA[It adds a category name to an intent-filter. It is contained within the <intent-filter> element.]]></string>
    <string name="manifest_para20"><![CDATA[<category android:name=\'android.intent.category.LAUNCHER\' />]]></string>
    <string name="manifest_para21">The uses-configuration components are used to specify the combination of input mechanisms that are supported by our application. It is useful for games that require particular input controls.</string>
    <string name="manifest_para22"><![CDATA[<uses-configuration\n android:reqTouchScreen=\'finger\'\n android:reqNavigation=\'trackball\'\n android:reqHardKeyboard=\'true\'\n android:reqKeyboardType=\'qwerty\'/>\n <uses-configuration\n android:reqTouchScreen=\'finger\'\n android:reqNavigation=\'trackball\'\n android:reqHardKeyboard=\'true\'\n android:reqKeyboardType=\'twelvekey\'/>]]></string>
    <string name="manifest_para23">It is used to specify which hardware features your application requires. This will prevent our application from being installed on a device that does not include a required piece of hardware such as NFC hardware, as follows:</string>
    <string name="manifest_para24"><![CDATA[<uses-feature android:name=\'android.hardware.nfc\' />]]></string>
    <string name="manifest_para25">It is used to create permissions to restrict access to shared application components. We can also use the existing platform permissions for this purpose or define your own permissions in the manifest.</string>
    <string name="manifest_para26"><![CDATA[<permission\n android: name=\'com.paad.DETONATE_DEVICE\'\n android:protectionLevel=\'dangerous\'\n android:label=\'Self Destruct\'\n android:description=\'@string/detonate_description\'>\n </permission>]]></string>
    <string name="resraw_para1">The res/values folder is used to store the values for the resources that are used in many Android projects including features of color, styles, dimensions, etc. In this article, we will learn about the res/values folder.\nBelow explained are a few basic files, contained in the res/values folder:\n 1. colors.xml\n 2. dimens.xml\n 3.strings.xml\n 4. styles.xml</string>
    <string name="resraw_para2">The colors.xml is an XML file that is used to store the colors for the resources. An Android project contains 3 essential colors namely:\n\n colorPrimary\n colorPrimaryDark\n colorAccent\n\n These colors are used in some predefined resources of the Android studio as well. These colors need to be set opaque otherwise it could result in some exceptions to arise.\n\n Below mentioned is the implementation of the colors.xml resource:</string>
    <string name="resraw_para3"><![CDATA[<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <resources> \n <color name=\'colorPrimary\'>#1294c8</color>\n <color name=\'colorPrimaryDark\'>#1294c8</color>\n <color name=\'colorAccent\'>#FF4081</color> \n <color name=\'text_color\'>#555555</color> \n <color name=\'colorText\'>#FFFFFF</color> \n <color name=\'colorTextHint\'>#51d8c7</color>\n </resources>]]></string>
    <string name="resraw_para4">The dimens.xml is used for defining the dimensions for different widgets to be included in the Android project. It is a good coding practice to use dimens.xml to define a dimension rather than just writing the dimension in the resource, due to the fact that if ever any need arises to change the dimension, instead of making a change to all, only the dimens.xml can be changed once and the change is reflected in all.\n\n Below mentioned is the implementation of dimens.xml resource:</string>
    <string name="resraw_para5"><![CDATA[<resources>\n <dimen name=\'activity_horizontal_margin\'>16dp</dimen>\n <dimen name=\'activity_vertical_margin\'>16dp</dimen>\n <dimen name=\'nav_header_vertical_spacing\'>8dp</dimen>\n <dimen name=\'nav_header_height\'>176dp</dimen>\n <dimen name=\'fab_margin\'>16dp</dimen>\n </resources>]]></string>
    <string name="resraw_para6">One of the most important as well as widely used values file is the strings.xml due to its applicability in the Android project. Basic function of the strings.xml is to define the strings in one file so that it is easy to use same string in different positions in the android project plus it makes the project looks less messy. We can also define an array in this file as well.\n\n Below mentioned is the implementation of strings.xml resource:</string>
    <string name="resraw_para7"><![CDATA[<resources>\n <string name=\'app_name\'>Workshop app</string>\n <string name=\'navigation_drawer_open\'>Open navigation drawer</string>\n <string name=\'navigation_drawer_close\'>Close navigation drawer</string>\n <string name=\'action_settings\'>Settings</string>\n <string name=\'hello_blank_fragment\'>Hello blank fragment</string>\n <string name=\'date\'>Date:</string>\n <string name=\'timings\'>Timings:</string>\n </resources>]]></string>
    <string name="resraw_para8">Another important file in the values folder is the styles.xml where all the themes of the Android project are defined. The base theme is given by default having the option to customize or make changes to the customized theme as well. Every theme has a parent attribute which defines the base of the theme. There are a lot of options to choose from depending on the need of the Android project.\n\n Below mentioned is the implementation of styles.xml resource:</string>
    <string name="resraw_para9"><![CDATA[<resources>\n <style name=\'AppTheme\' parent=\'Theme.AppCompat.Light.DarkActionBar\'>\n <item name=\'colorPrimary\'>@color/colorPrimary</item>\n <item name=\'colorPrimaryDark\'>@color/colorPrimaryDark</item>\n <item name=\'colorAccent\'>@color/colorAccent</item>\n </style>\n <style name=\'AppTheme.NoActionBar\'>\n <item name=\'windowActionBar\'>false</item>\n <item name=\'windowNoTitle\'>true</item>\n </style>\n <style name=\'AppTheme.AppBarOverlay\' parent=\'ThemeOverlay.AppCompat.Dark.ActionBar\' />\n <style name=\'AppTheme.PopupOverlay\' parent=\'ThemeOverlay.AppCompat.Light\' />\n </resources>]]></string>
    <string name="asset_para1">You will note that, in contrast to Eclipse ADT (App Development Tools), Android Studio lacks the Assets folder, which is where we typically store web assets like HTML. Adding arbitrary files to an application, such as text, XML, HTML, typefaces, audio, and video, is possible using assets. You won\'t be able to access the raw data if these files are added to Android as resources since Android will regard them as part of its resource system. Assets are one method to access data that hasn\'t been altered. However, one would wonder, \'Why in the asset folder By making a Resource Raw Folder, we can accomplish the same tasks. Now lets talk about the differences between the Resource Raw folder and the assets folder.\n\nHow the asset folder is different from the Resource Raw folder? \n\nIn Android one can store the raw asset file like JSON, Text, mp3, HTML, pdf, etc in two possible locations:\n\n1. assets\n2. res/raw folder</string>
    <string name="asset_para2">Both of them appears to be the same, as they can read the file and generate InputStream as below\n // From assets\n assets.open(assetPathFilename)\n // From res/raw\n resources.openRawResource(resourceRawFilename)</string>
    <string name="asset_para3">But when to use which folder?\n\n1. Flexible File Name: (assets is better)</string>
    <string name="asset_para4">I. assets: The developer can name the file name in any way, like having capital letters (fileName) or having space (file name).\n II. res/raw: In this case, the name of the file is restricted. File-based resource names must contain only lowercase a-z, 0-9, or underscore.</string>
    <string name="asset_para5">2. Store in subdirectory: (possible in assets)</string>
    <string name="asset_para6">I. assets: If the developer wants to categories the files into subfolders, then he/she can do it in assets like below.</string>
    <string name="asset_para7">3. Compile-time checking: (possible in res/raw)</string>
    <string name="asset_para8"><![CDATA[I. assets: Here, the way to read it into InputStream is given below. If the filename doesn’t exist, then we need to catch it.\n\n -> assets.open(“filename”)\n\nII. res/raw folder: Here, the way to read it into InputStream is:\n\n -> resources.openRawResource(R.raw.filename)\n\nSo putting a file in the res/raw folder will provide ensure the correct file-name during compile time check.]]></string>
    <string name="asset_para9">4. List filenames at runtime: (possible in assets)</string>
    <string name="asset_para10">I. assets: If the developer wants to list all the files in the assets folder, he/she has used the list() function and provide the folder name or blank Queto on the root folder as given below.\n\n assets.list(FOLDER_NAME)?.forEach {\n println(it)\n }\n\nII.res/raw: This is not possible in this folder. The developer has to know the filename during development, and not runtime.\n\nSo, in assets, one can read the filename during runtime, list them, and use them dynamically. In res/raw, one needs to code them ready, perhaps in the string resources file.</string>
    <string name="asset_para11">5. Filename accessible from XML: (possible in res/raw)</string>
    <string name="asset_para12">I. assets: No simple way the developer can arrange an XML file (e.g. AndroidManifest.xml) to point to the file in the assets folder.\n\nII.res/raw: In any XML files like in Java, the developer can access the file in res/raw using @raw/filename easily.\n\nSo if you need to access your file in any XML, put it in the res/raw folder. Let’s make a table to remember the whole scenario easily.</string>
    <string name="asset_para13">How to Create Assets Folder in Android Studio?</string>
    <string name="asset_para14">Now let’s discuss how to create an assets folder in the android studio. Below is the step-by-step process to create an assets folder in Android studio.\n\nStep 1: To create an asset folder in Android studio open your project in Android mode first as shown in the below image.</string>
    <string name="asset_para15"><![CDATA[Step 2: Go to the app > right-click > New > Folder > Asset Folder and create the asset folder.]]></string>
    <string name="asset_para16">Step 3: Android Studio will open a dialog box. Keep all the settings default. Under the target source set, option main should be selected. and click on the finish button.</string>
    <string name="asset_para17">Step 4: Now open the app folder and you will find the assets folder by the name of “assets” as shown in the below image.</string>
    <string name="lifecycle_para1">An activity in an Android application is referred to as a single screen. It resembles a single window of any desktop application quite a bit. An Android application is made up of one or more activities or displays.Activity stacks are used to manage the many stages or lifetimes that each activity goes through. As a result, the prior action always starts underneath the current one. An activity has four phases to it. \n\n1. An activity is considered to be active or running if it is at the top of the stack, or in the foreground of the screen. Usually, the user is dealing with this activity at the moment.\n\n2. If a non-full-sized or transparent activity has concentrated on top of your activity and your activity has lost focus. Either the activity itself is not focusable in the current window mode, or another activity has a higher position in multi-window mode. This kind of behaviour is fully alive.\n\n3. An action is stopped or hidden if it is fully concealed by another activity. It still keeps all the data, but because of its hidden window, the system frequently kills it when RAM is needed for other purposes.\n\n4. The activity can be eliminated from memory by the system by either stopping the process or requesting that it finish. It needs to be totally restarted and put back in its original state before the user sees it again.\n\nFor each stage, android provides us with a set of 7 methods that have their own significance for each stage in the life cycle. The image shows a path of migration whenever an app switches from one state to another.</string>
    <string name="lifecycle_para2">Detailed introduction on each of the method is stated as follows:</string>
    <string name="lifecycle_para3">It is called when the activity is first created. This is where all the static work is done like creating views, binding data to lists, etc. This method also provides a Bundle containing its previous frozen state, if there was one. \n\nExample:</string>
    <string name="lifecycle_para5">import android.support.v7.app.AppCompatActivity;\n import android.os.Bundle;\n import android.widget.Toast;\n public class MainActivity extends AppCompatActivity {\n @Override\n protected void onCreate(Bundle savedInstanceState)\n {\n super.onCreate(savedInstanceState);\n // Bundle containing previous frozen state\n setContentView(R.layout.activity_main);\n // The content view pointing to the id of layout\n // in the file activity_main.xml\n Toast toast = Toast.makeText(getApplicationContext(), \'onCreate Called\', Toast.LENGTH_LONG).show();\n }\n }</string>
    <string name="lifecycle_para4">It is invoked when the activity is visible to the user. It is followed by onResume() if the activity is invoked from the background. It is also invoked after onCreate() when the activity is first started.\n\nExample:</string>
    <string name="lifecycle_para6">import android.support.v7.app.AppCompatActivity;\n import android.os.Bundle;\n import android.widget.Toast;\n public class MainActivity extends AppCompatActivity {\n @Override\n protected void onCreate(Bundle savedInstanceState)\n {\n super.onCreate(savedInstanceState);\n // Bundle containing previous frozen state\n setContentView(R.layout.activity_main);\n // The content view pointing to the id of layout\n // in the file activity_main.xml\n Toast toast = Toast.makeText(getApplicationContext(), \'onCreate Called\', Toast.LENGTH_LONG).show();\n }\n protected void onStart()\n {\n // It will show a message on the screen\n // then onStart is invoked\n Toast toast = Toast.makeText(getApplicationContext(), \'onStart Called\', Toast.LENGTH_LONG).show();\n }\n }</string>
    <string name="lifecycle_para7">It is invoked after the activity has been stopped and prior to its starting stage and thus is always followed by onStart() when any activity is revived from background to on-screen.\n\nExample:</string>
    <string name="lifecycle_para8">protected void onRestart() {\n // It will show a message on the screen\n // then onRestart is invoked\n Toast toast = Toast.makeText(getApplicationContext(), \'onRestart Called\', Toast.LENGTH_LONG).show();\n }</string>
    <string name="lifecycle_para9">When the activity begins communicating with the user, it is called. A user is now interacting with the activity, which is at the top of the activity stack. When the user closes the application or causes it to go into the background, onPause() is always the next to happen.\n\nExample:</string>
    <string name="lifecycle_para10">protected void onResume() {\n// It will show a message on the screen\n// then onResume is invoked\nToast toast = Toast.makeText(getApplicationContext(), \'onResume Called\', Toast.LENGTH_LONG).show();\n}</string>
    <string name="lifecycle_para11">It is triggered when an activity enters the background but isn\'t terminated yet. It is the opposite of onResume(). This callback will be triggered on the top activity (currently on screen) whenever an activity is launched in front of another activity. It is advised that complex processing be avoided in this section as the activity under the active activity won\'t be created until the active activity\'s onPause() returns. n\nExample:</string>
    <string name="lifecycle_para12">protected void onPause() {\n // It will show a message on the screen\n // then onPause is invoked\n Toast toast = Toast.makeText(getApplicationContext(), \'onPause Called\', Toast.LENGTH_LONG).show();\n }</string>
    <string name="lifecycle_para13">When the user cannot see the activity, it is triggered. When the activity is ended or closed, onDestroy() comes next, and nothing happens when it is just in the background.OnRestart() comes next when the activity is pulled out of the background. It should be noted that in low memory scenarios, where the system lacks the memory to continue the activity\'s process after its onPause() method has been called, this method might never be called.\n\nExample:</string>
    <string name="lifecycle_para14">protected void onStop() {\n // It will show a message on the screen\n // then onStop is invoked\n Toast toast = Toast.makeText(getApplicationContext(), \'onStop Called\', Toast.LENGTH_LONG).show();\n }</string>
    <string name="lifecycle_para15">The last call that is made before the activity is terminated. This may occur when finish() is called, indicating that the activity is coming to an end, or it may occur because the activity is being momentarily destroyed by the system to free up space. Use isFinishing() to verify if there are any differences between these situations.\n\nExample:</string>
    <string name="lifecycle_para16">protected void onDestroy() {\n // It will show a message on the screen\n // then onDestroy is invoked\n Toast toast = Toast.makeText(getApplicationContext(), \'onDestroy Called\', Toast.LENGTH_LONG).show();\n }</string>
    <string name="lifecycle_para17">Demo Android App to Demonstrate Activity Lifecycle in Android</string>
    <string name="lifecycle_para18">package com.example.andybase;\n\n import androidx.appcompat.app.AppCompatActivity;\n import android.os.Bundle;\n import android.widget.Toast;\n\n public class ActivityLifecycle extends AppCompatActivity {\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_lifecycle);\n Toast.makeText(getApplicationContext(), \'onCreate Called\', Toast.LENGTH_LONG).show();\n }\n protected void onStart() {\n super.onStart();\n Toast.makeText(getApplicationContext(), \'onStart Called\', Toast.LENGTH_LONG).show();\n }\n @Override\n protected void onRestart() {\n super.onRestart();\n Toast.makeText(getApplicationContext(), \'onRestart Called\', Toast.LENGTH_LONG).show();\n }\n protected void onPause() {\n super.onPause();\n Toast.makeText(getApplicationContext(), \'onPause Called\', Toast.LENGTH_LONG).show();\n }\n protected void onResume() {\n super.onResume();\n Toast.makeText(getApplicationContext(), \'onResume Called\', Toast.LENGTH_LONG).show();\n }\n protected void onStop() {\n super.onStop();\n Toast.makeText(getApplicationContext(), \'onStop Called\', Toast.LENGTH_LONG).show();\n }\n protected void onDestroy() {\n super.onDestroy();\n Toast.makeText(getApplicationContext(), \'onDestroy Called\', Toast.LENGTH_LONG).show();\n }\n }</string>
    <string name="context_para1">Android applications have been widely used for a while, and their popularity is only growing as users demand more seamless and easier ways to view the data they desire. Therefore, before beginning to develop the app, Android developers need to be familiar with the key terminologies. Context is a term that we frequently encounter in Android programming. What precisely is this context, and why is it significant, then? Before we respond to this query, let\'s examine what context actually means in its literal sense:\n\nLooking at this definition we come across two things:\n\n 1. The Context tells us about the surrounding information.\n 2. It is very important to understand the environment which we want to understand.\n\nSimilarly when we talk about Android Programming Context can be understood as something which gives us the Context of the current state of our application. We can break the Context and its use into three major points: \n\n ● It allows us to access resources.\n ● It allows us to interact with other Android components by sending messages.\n ● It gives you information about your app environment.\n\n The code has been given in both Java and Kotlin Programming Language for Android.</string>
    <string name="context_para2">Understanding Context by a Real World Example</string>
    <string name="context_para3">Let\' s a person visit a hotel. He needs breakfast, lunch, and dinner at a suitable time. Except for these things there are also many other things, he wants to do during his time of stay. So how does he get these things? He will ask the room-service person to bring these things for him. Right? So here the room-service person is the Context considering you are the single activity and the hotel to be your app, finally, the breakfast, lunch and dinner have to be the resources.</string>
    <string name="context_para4">1. Application Context and \n2. Activity Context</string>
    <string name="context_para5">This Context is tied to the Lifecycle of an Application. Mainly it is an instance that is a singleton and can be accessed via getApplicationContext(). Some use cases of Application Context are:\n\n 1. If it is necessary to create a singleton object\n 2. During the necessity of a library in an activity \n\ngetApplicationContext():\n\nIt is used to return the Context which is linked to the Application which holds all activities running inside it. When we call a method or a constructor, we often have to pass a Context and often we use “this” to pass the activity Context or “getApplicationContext” to pass the application Context. This method is generally used for the application level and can be used to refer to all the activities. For example, if we want to access a variable throughout the android app, one has to use it via getApplicationContext().</string>
    <string name="context_para6">import android.app.AndyBase;\n public class GlobalExampleClass extends Application {\n private String globalName;\n private String globalEmail;\n public String getName() {\n return globalName;\n }\n public void setName(String aName) {\n globalName = aName;\n }\n public String getEmail() {\n return globalEmail;\n }\n public void setEmail(String aEmail) {\n globalEmail = aEmail;\n }\n }</string>
    <string name="context_para7">So, whenever the variable scope is required throughout the application, we can get it by means of getApplicationContext(). Following is a list of functionalities of Application Context.\n\nList of functionalities of Application Context:\n\n ● Load Resource Values\n ● Start a Service\n ● Bind to a Service\n ● Send a Broadcast\n ● Register BroadcastReceiver</string>
    <string name="context_para8">It is the activity Context meaning each and every screen got an activity. For example, EnquiryActivity refers to EnquiryActivity only and AddActivity refers to AddActivity only. It is tied to the life cycle of activity. It is used for the current Context. The method of invoking the Activity Context is getContext().\n\n Some use cases of Activity Context are:\n ● The user is creating an object whose lifecycle is attached to an activity.\n ● Whenever inside an activity for UI related kind of operations like toast, dialogue, etc.,\n\n getContext():\n It returns the Context which is linked to the Activity from which it is called. This is useful when we want to call the Context from only the current running activity.</string>
    <string name="context_para9"><![CDATA[public void onItemClick(AdapterView<?> parent, View view, int pos, long id) {\n // view.getContext() refers to the current activity view\n // Here it is used to start the activity\n Intent intent = new Intent(view.getContext(), <your java classname>::class.java);\n intent.putExtra(pid, ID);\n view.getContext().startActivity(intent);\n }\n\n List of Functionalities of Activity Context:\n ● Load Resource Values\n ● Layout Inflation\n ● Start an Activity\n ● Show a Dialog\n ● Start a Service\n ● Bind to a Service\n ● Send a Broadcast\n ● Register BroadcastReceiver]]></string>
    <string name="context_para10">this:\n“this” argument is of a type “Context”. To explain this Context let’s take an example to show a Toast Message using “this”.\n\nExample:</string>
    <string name="context_para11">import android.os.Bundle;\n import android.widget.Toast;\n import androidx.appcompat.app.AppCompatActivity;\n // Show a simple toast message, that can be done after doing some activities\n // Toast.makeText(this, \'Action got completed\', Toast.LENGTH_SHORT).show();\n public class ExampleActivity extends AppCompatActivity {\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main_example);\n // Displaying Toast with Hello Javatpoint message\n Toast.makeText(this,\'Action done\',Toast.LENGTH_SHORT).show();\n } }</string>
    <string name="bundle_para1">It is well known that Android uses intents to transfer data between activities. However, there is an alternative that uses less code space and is more effective for moving data between activities: using Android\'s bundles. Data is typically passed from one activity to another via Android Bundles. In essence, the idea of a key-value pair is applied here, where the value of the map serves as the data to be passed and can be subsequently retrieved via the key. Values are sent and retrieved in the same way as they are when using bundles, just as they are when using intent. Depending on the individual bundles are capable of holding and passing any kind of value—int, String, boolean, or char—to the new activity, regardless of the kind of value the user wishes to pass.\n\nThe following are the major types that are passed/retrieved to/from a Bundle:</string>
    <string name="bundle_para2">putInt(String key, int value), getInt(String key, int value)\n putString(String key, String value), getString(String key, String value)\n putStringArray(String key, String[] value), getStringArray(String key, String[] value)\n putChar(String key, char value), getChar(String key, char value)\n putBoolean(String key, boolean value), getBoolean(String key, boolean value)</string>
    <string name="bundle_para3">The bundle is always used with Intent in Android. Now to use Bundle writes the below code in the MainActivity.\n\n // creating a intent\n Intent intent = new Intent(this, SecondActivity.class);\n // creating a bundle object\n Bundle bundle = new Bundle();\n // storing the string value in the bundle\n // which is mapped to key\n bundle.putString(\'key1\', \'GFG :- Main Activity\');\n // passing the bundle into the intent\n intent.putExtras(bundle);\n // starting the intent\n startActivity(intent);</string>
    <string name="bundle_para4">Now create another empty activity named SecondActivity. Now to retrieve the data stored in the Bundle, write the following code in SecondActivity.\n // getting the bundle back from the android\n Bundle bundle = getIntent().getExtras();\n // getting the string back\n String title = bundle.getString(\'key1\', \'Default\');</string>
    <string name="bundle_para5">MainActivity.java\n\n Intent intent = new Intent(this, ContentProviderEx.class);\n Bundle bundle = new Bundle();\n bundle.putString(\'key1\', \'Send From MainActivity\');\n bundle.putInt(\'Age\',20);\n intent.putExtras(bundle);\n startActivity(intent);\n\n SecondActivity.java\n\n TextView tv = findViewById(R.id.tv);\n Bundle bundle = getIntent().getExtras();\n String title = bundle.getString(\'key1\', \'Default\');\n int age = bundle.getInt(\'Age\', 0);\n tv.setText(title+\'/\'+age); \n\nYou can set intent on button onClick event And get bundle in SecondActivity.. \n\n Output</string>
    <string name="alllayout_para1"><![CDATA[activity_main.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <LinearLayout xmlns:android=\'http://schemas.android.com/apk/res/android\'\n android:id=\'@+id/Main_View\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'\n android:orientation=\'vertical\'>\n <TextView\n android:id=\'@+id/txtVw\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_margin=\'16dp\'\n android:layout_marginTop=\'20dp\'\n android:paddingTop=\'20dp\'\n android:text=\'Enter your name here:\'\n android:textSize=\'24dp\' />\n <EditText\n android:id=\'@+id/editText\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_margin=\'16dp\'\n android:hint=\'Name\'\n android:inputType=\'text\'/>\n <Button\n android:id=\'@+id/showInput\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_gravity=\'center_horizontal\'\n android:backgroundTint=\'@color/colorPrimary\'\n android:text=\'show\'\n android:textColor=\'@android:color/white\' />\n </LinearLayout>\n\nOutout]]></string>
    <string name="alllayout_para2"><![CDATA[activity_main.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <LinearLayout xmlns:android=\'http://schemas.android.com/apk/res/android\'\n android:id=\'@+id/Main_View\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'\n android:orientation=\'horizontal\'>\n <TextView\n android:id=\'@+id/txtVw\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_margin=\'16dp\'\n android:layout_marginTop=\'20dp\'\n android:paddingTop=\'20dp\'\n android:text=\'Enter your name here:\'\n android:textSize=\'24dp\' />\n <EditText\n android:id=\'@+id/editText\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_margin=\'16dp\'\n android:hint=\'Name\'\n android:inputType=\'text\'/>\n <Button\n android:id=\'@+id/showInput\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_gravity=\'center_horizontal\'\n android:backgroundTint=\'@color/colorPrimary\'\n android:text=\'show\'\n android:textColor=\'@android:color/white\' />\n </LinearLayout>\n\nOutout]]></string>
    <string name="alllayout_para3">Every child view is aligned in a vertical or horizontal line by a LinearLayout. A horizontal layout has a row of views, while a vertical layout has a column of views. It allows each child view to have a weight attribute, which regulates how big each child view is in relation to the other views in the available space.\n\nAll the child elements arranged one by one in multiple rows and multiple columns.\n\n 1. Horizontal list: One row, multiple columns.\n 2. Vertical list: One column, multiple rows.</string>
    <string name="alllayout_para4"><![CDATA[activity_main.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <RelativeLayout xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:tools=\'http://schemas.android.com/tools\'\n android:layout_width=\'match_parent\'\n android:orientation=\'horizontal\'\n android:layout_marginTop=\'40dp\'\n android:layout_height=\'match_parent\'\n android:layout_centerInParent=\'true\'\n tools:context=\'.MainActivity\'>\n <TextView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_alignParentStart=\'true\'\n android:layout_alignParentTop=\'true\'\n android:layout_marginStart=\'47dp\'\n android:layout_marginTop=\'70dp\'\n android:text=\'Enter Text\'\n android:textSize=\'20dp\' />\n <TextView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_alignParentStart=\'true\'\n android:layout_alignParentTop=\'true\'\n android:layout_marginStart=\'48dp\'\n android:layout_marginTop=\'120dp\'\n android:text=\'Enter Text\'\n android:textSize=\'20dp\' />\n <Button\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_alignParentTop=\'true\'\n android:layout_centerHorizontal=\'true\'\n android:layout_marginStart=\'10dp\'\n android:layout_marginTop=\'176dp\'\n android:text=\'Enter Text\'\n android:textSize=\'20dp\' />\n </RelativeLayout>\n\nOutput :]]></string>
    <string name="alllayout_para5">When creating custom layouts for Android, the Relative Layout is a very flexible layout option. It allows us to freely orient our component or view in relation to the position of its sibling or relative components. The reason it\'s regarded as the most flexible layout is that we can place the component wherever we choose. For the same reason, in Android, the Relative layout is more popular than the Linear layout. It permits its child views to be positioned in relation to one another, the container, or another container.</string>
    <string name="alllayout_para6">With its flat view hierarchy and flexible widget positioning and sizing, Constraint Layout is a ViewGroup—a view that contains other views—that lets you build expansive and intricate layouts. It was developed to aid in lowering view nesting and enhancing layout file performance. Though it is much more flexible and integrates better with Android Studio\'s Layout Editor, ConstraintLayout is very similar to RelativeLayout in that views are arranged based on relationships between sibling views and the parent layout. 2016 saw its release at Google I/O. Since its creation (i.e., as of Android Studio 2.3), it has grown to be a highly utilized viewgroup.</string>
    <string name="alllayout_para7"><![CDATA[activity_main.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:app=\'http://schemas.android.com/apk/res-auto\'\n xmlns:tools=\'http://schemas.android.com/tools\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'\n android:layout_centerInParent=\'true\'\n android:orientation=\'horizontal\'\n tools:context=\'.MainActivity\'>\n <TextView\n android:id=\'@+id/textView3\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginStart=\'64dp\'\n android:layout_marginBottom=\'20dp\'\n android:text=\'Enter Text\'\n android:textSize=\'20dp\'\n app:layout_constraintBottom_toTopOf=\'@+id/textView4\'\n app:layout_constraintStart_toStartOf=\'parent\' />\n <TextView\n android:id=\'@+id/textView4\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginStart=\'64dp\'\n android:layout_marginTop=\'164dp\'\n android:text=\'Enter Text\'\n android:textSize=\'20dp\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\' />\n <Button\n android:id=\'@+id/button\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginStart=\'132dp\'\n android:layout_marginTop=\'128dp\'\n android:text=\'Enter Text\'\n android:textSize=\'20dp\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'@+id/textView3\' />\n </androidx.constraintlayout.widget.ConstraintLayout>\n\nOutput :]]></string>
    <string name="alllayout_para8">alllayout_para6An Absolute Layout is a layout in Android that is used to create custom layouts. Using x and y coordinates, you can pinpoint the precise location of each child in this arrangement.\nFull Screen in Android Studio\n\nImportant Note 1: Because we set the precise location of a child view, also known as a component, absolute layouts are more difficult to maintain for varying mobile screen sizes than other types of layouts. Because of the wide range of screen sizes and aspect ratios, the positioning that is based on x(top) and y(left) coordinates is not as helpful.\n\nImportant Note 2: For the same reason as mentioned in the previous note, absolute layout is depreciated in Android.</string>
    <string name="alllayout_para9"><![CDATA[activity_main.xml\n\n<AbsoluteLayout xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:tools=\'http://schemas.android.com/tools\'\n android:layout_width=\'fill_parent\'\n android:layout_height=\'fill_parent\'\n tools:context=\'.MainActivity\'>\n <TextView\n android:layout_x=\'100px\'\n android:layout_y=\'100px\'\n android:text=\'User Name\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\' />\n <EditText\n android:layout_x=\'270px\'\n android:layout_y=\'80px\'\n android:width=\'100px\'\n android:layout_width=\'200dp\'\n android:layout_height=\'wrap_content\' />\n <TextView\n android:layout_x=\'110px\'\n android:layout_y=\'200px\'\n android:text=\'Password\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\' />\n <EditText\n android:layout_x=\'270px\'\n android:layout_y=\'150px\'\n android:width=\'100px\'\n android:layout_width=\'200dp\'\n android:layout_height=\'wrap_content\' />\n <Button\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Log In\'\n android:layout_x=\'300px\'\n android:layout_y=\'300px\'/>\n </AbsoluteLayout>\n\nOutput :]]></string>
    <string name="alllayout_para10">One of the easiest layouts for arranging view controls is the frame layout. Their purpose is to obstruct a certain region of the display. Since it can be challenging to display single views at a specific location on the screen without them overlapping, child view should be held in place by the Frame Layout.\n\nBy giving each child in a FrameLayout a gravity value and using the android:layout_gravity attribute, we can add more children and manage their placement.</string>
    <string name="alllayout_para11"><![CDATA[activity_main.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <FrameLayout xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:tools=\'http://schemas.android.com/tools\'\n android:layout_width=\'fill_parent\'\n android:layout_height=\'fill_parent\'\n tools:context=\'.MainActivity\'>\n <TextView android:text=\'LeftTop\'\n android:textSize=\'20dp\'\n android:textStyle=\'bold\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\' />\n <TextView android:layout_height=\'wrap_content\'\n android:layout_width=\'wrap_content\'\n android:text=\'RightTop\'\n android:textSize=\'20dp\'\n android:textStyle=\'bold\'\n android:layout_gravity=\'top|right\' />\n <TextView android:layout_height=\'wrap_content\'\n android:layout_width=\'wrap_content\'\n android:text=\'CentreTop\'\n android:textSize=\'20dp\'\n android:textStyle=\'bold\'\n android:layout_gravity=\'top|center_horizontal\' />\n <TextView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'20dp\'\n android:layout_gravity=\'left|center_vertical\'\n android:text=\'Left\'\n android:textSize=\'20dp\'\n android:textStyle=\'bold\' />\n <TextView android:layout_height=\'wrap_content\'\n android:layout_width=\'wrap_content\'\n android:text=\'Right\'\n android:textSize=\'20dp\'\n android:textStyle=\'bold\'\n android:layout_gravity=\'right|center_vertical\' />\n <TextView android:layout_height=\'wrap_content\'\n android:layout_width=\'wrap_content\'\n android:text=\'Centre\'\n android:textSize=\'20dp\'\n android:textStyle=\'bold\'\n android:layout_gravity=\'center\' />\n <TextView android:text=\'LeftBottom\'\n android:textSize=\'20dp\'\n android:textStyle=\'bold\'\n android:layout_gravity=\'left|bottom\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\' />\n <TextView android:layout_height=\'wrap_content\'\n android:layout_width=\'wrap_content\'\n android:text=\'RightBottom\'\n android:textSize=\'20dp\'\n android:textStyle=\'bold\'\n android:layout_gravity=\'right|bottom\' />\n <TextView android:layout_height=\'wrap_content\'\n android:layout_width=\'wrap_content\'\n android:textSize=\'20dp\'\n android:textStyle=\'bold\'\n android:text=\'CenterBottom\'\n android:layout_gravity=\'center|bottom\' />\n </FrameLayout>\n\nOutput :]]></string>
    <string name="alllayout_para12"><![CDATA[The group of views in Android is arranged into rows and columns using the Table Layout feature. There is no border line showing for the columns, rows, or cells in Table Layout containers. A table with the maximum number of cells in a row will have that many columns.\n\n The <TableRow> element is what we will use to construct a row in a table. The child views of a table layout are called table row objects. There are zero or more cells in each row of the table, and each cell can only contain one view object, such as an ImageView, TextView, or other view. The parent container of a table determines its total width. Stretchable and shrinkable columns are both possible. If a column is stretchable, its width can be expanded to accommodate any additional space, and if it is shrinkable, it can be reduced in width to fit the table inside its parent object.\n\n Important Note: The width of the children\'s table layout cannot be specified. Wider always matches parent width in this case.]]></string>
    <string name="alllayout_para13"><![CDATA[activity_main.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <TableLayout xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:tools=\'http://schemas.android.com/tools\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'\n android:stretchColumns=\'1\'\n android:layout_margin=\'20dp\'\n tools:context=\'.MainActivity\'>\n <TableRow>\n   <TextView\n android:layout_column=\'1\'\n android:text=\'Open…\'\n android:padding=\'3dip\' />\n   <TextView\n android:text=\'Ctrl-O\'\n android:gravity=\'right\'\n android:padding=\'3dip\' />\n </TableRow>\n <TableRow>\n <TextView\n android:layout_column=\'1\'\n android:text=\'Save…\'\n android:padding=\'3dip\' />\n <TextView\n android:text=\'Ctrl-S\'\n android:gravity=\'right\'\n android:padding=\'3dip\' />\n </TableRow>\n <TableRow>\n <TextView\n android:layout_column=\'1\'\n android:text=\'Save As...\'\n android:padding=\'3dip\' />\n <TextView\n android:text=\'Ctrl-Shift-S\'\n android:gravity=\'right\'\n android:padding=\'3dip\' />\n </TableRow>\n <View\n android:layout_height=\'2dip\'\n android:background=\'#FF909090\' />\n <TableRow>\n <TextView\n android:text=\'X\'\n android:padding=\'3dip\' />\n <TextView\n android:text=\'Import...\'\n android:padding=\'3dip\' />\n </TableRow>\n <TableRow>\n <TextView\n android:text=\'X\'\n android:padding=\'3dip\' />\n <TextView\n android:text=\'Export...\'\n android:padding=\'3dip\' />\n <TextView\n android:text=\'Ctrl-E\'\n android:gravity=\'right\'\n android:padding=\'3dip\' />\n </TableRow>\n <View\n android:layout_height=\'2dip\'\n android:background=\'#FF909090\' />\n <TableRow>\n <TextView\n android:layout_column=\'1\'\n android:text=\'Quit\'\n android:padding=\'3dip\' />\n </TableRow>\n </TableLayout>\n\nOutput :]]></string>
    <string name="alllayout_para14">It is said that Layout Managers, or just layouts, are extensions of the ViewGroup class. They are employed in the UI we are creating to set the location of child Views. Because we can nest the layouts, we can use a combination of layouts to create UIs that are arbitrary complex.\n\nThe Android SDK includes a number of layout classes. To create the user interface (UI) for your views, fragments, and activities, you can use, modify, or make your own. Employing the appropriate layout combinations will help you present your content in an efficient manner.</string>
    <string name="navigation">The component known as the navigation drawer allows users to navigate to different sections of your app with a slide-in menu. By tapping a menu icon or swiping from the side, users can activate it.\n\nTake a look at these three scenarios in which a navigation drawer might be used:\n\nOrganize content so that users can navigate between categories, as in blogging or news applications.\n\nAccount management: In apps that have user accounts, include fast links to the profile and account settings sections.\n\nFeature discovery: To make it easier for users to find and use complex apps, group various features and settings into a single menu.\n\nThere are two varieties of navigation drawers in Material Design:\n\nStandard: Allow other content to occupy part of a screen.\nModal content is that which displays on top of other content on a screen.</string>
    <string name="navigation2"><![CDATA[navigation_menu.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <menu xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:tool=\'http://schemas.android.com/tools\'\n tool:showIn =\'navigation_view\'>\n <group\n android:checkableBehavior=\'single\'>\n <item\n android:id=\'@+id/nav_home\'\n android:title=\'Home\'\n android:icon=\'@drawable/icon_nav\'>\n </item>\n <item\n android:title=\'Attendance Track\'\n android:id=\'@+id/attend_track\'\n android:icon=\'@drawable/icon_nav\'>\n </item>\n <item\n android:title=\'QR Scan\'\n android:id=\'@+id/scan_qr\'\n android:icon=\'@drawable/icon_nav\'>\n </item>\n </group>\n <item android:title=\'General\'>\n <menu>\n <item android:title=\'Profile\'\n android:id=\'@+id/profile\'\n android:icon=\'@drawable/icon_nav\'/>\n <item android:title=\'Settings\'\n android:id=\'@+id/settings\'\n android:icon=\'@drawable/icon_nav\'/>\n </menu>\n </item>\n <item android:title=\'Communicate\'>\n <menu>\n <item\n android:title=\'How To Use\'\n android:icon=\'@drawable/icon_nav\'\n android:id=\'@+id/use\'/>\n <item\n android:title=\'Suggestions\'\n android:icon=\'@drawable/icon_nav\'\n android:id=\'@+id/sugg\'/>\n <item android:title=\'Share App\'\n android:icon=\'@drawable/icon_nav\'\n android:id=\'@+id/share\'/>\n </menu>\n </item>\n </menu>]]></string>
    <string name="navigation3"><![CDATA[activity_navigation_drawer_ex\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?> <androidx.drawerlayout.widget.DrawerLayout xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:app=\'http://schemas.android.com/apk/res-auto\'\n xmlns:tools=\'http://schemas.android.com/tools\'\n android:layout_width=\'match_parent\'\n android:id=\'@+id/my_drawer_layout\'\n android:layout_height=\'match_parent\'\n android:fitsSystemWindows=\'true\'\n tools:openDrawer=\'start\'\n tools:context=\'.NavigationDrawerEx\'>\n <androidx.appcompat.widget.Toolbar\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:id=\'@+id/home_toolbar\'/>\n <com.google.android.material.navigation.NavigationView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'match_parent\'\n app:headerLayout=\'@layout/header\'\n android:layout_gravity=\'start\'\n app:menu=\'@menu/navigation_menu\'\n android:id=\'@+id/navigation\'\n />\n </androidx.drawerlayout.widget.DrawerLayout>]]></string>
    <string name="navigation4">NavigationDrawerEx.java\n\n public class NavigationDrawerEx extends AppCompatActivity implements\n SlidingDrawer.OnDrawerCloseListener{\n DrawerLayout drawerLayout;\n ActionBarDrawerToggle drawerToggle;\n NavigationView navigationView;\n private Toolbar toolbar;\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_navigation_drawer_ex);\n navigationView = findViewById(R.id.navigation);\n toolbar = findViewById(R.id.home_toolbar);\n setSupportActionBar(toolbar);\n ActionBar actionBar = getSupportActionBar();\n if (actionBar != null) {\n actionBar.setTitle(\'\'); }\n drawerLayout = (DrawerLayout) findViewById(R.id.my_drawer_layout);\n drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, toolbar,\n R.string.app_name, R.string.app_name);\n drawerToggle.setHomeAsUpIndicator(R.drawable.icon_nav);\n drawerLayout.setDrawerListener(drawerToggle);\n navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\n @Override\n public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n int id = item.getItemId();\n if(id == R.id.nav_home) {\n Toast.makeText(NavigationDrawerEx.this, \'Clicked Home!!!\', Toast.LENGTH_SHORT).show(); }\n if(id == R.id.attend_track) {\n Toast.makeText(NavigationDrawerEx.this, \'Clicked Attendance Track!!!\', Toast.LENGTH_SHORT).show(); }\n if(id == R.id.scan_qr) {\n Toast.makeText(NavigationDrawerEx.this, \'Clicked QR Scan!!!\', Toast.LENGTH_SHORT).show(); }\n if(id == R.id.profile) {\n Toast.makeText(NavigationDrawerEx.this, \'Clicked Profile!!!\', Toast.LENGTH_SHORT).show(); }\n if(id == R.id.settings) {\n Toast.makeText(NavigationDrawerEx.this, \'Clicked Setting!!!\', Toast.LENGTH_SHORT).show(); }\n if(id == R.id.use) {\n Toast.makeText(NavigationDrawerEx.this, \'Clicked How to Use!!!\', Toast.LENGTH_SHORT).show(); }\n if(id == R.id.sugg) {\n Toast.makeText(NavigationDrawerEx.this, \'Clicked Suggestions!!!\', Toast.LENGTH_SHORT).show(); }\n if(id == R.id.share) {\n Toast.makeText(NavigationDrawerEx.this, \'Clicked Share App!!!\', Toast.LENGTH_SHORT).show(); }\n return true;}\n });\n }\n @Override\n public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n if (drawerToggle.onOptionsItemSelected(item)) {\n return true; }\n return super.onOptionsItemSelected(item); }\n @Override\n public void onConfigurationChanged(@NonNull Configuration newConfig) {\n super.onConfigurationChanged(newConfig);\n drawerToggle.onConfigurationChanged(newConfig); }\n @Override\n public void onPostCreate(@Nullable Bundle savedInstanceState) {\n super.onPostCreate(savedInstanceState);\n drawerToggle.syncState(); }\n @Override\n public boolean onCreateOptionsMenu(Menu menu) {\n return true; }\n @Override\n public void onBackPressed() {\n if (drawerLayout.isDrawerOpen(Gravity.LEFT | Gravity.RIGHT)) {\n drawerLayout.closeDrawers();\n return; }\n super.onBackPressed(); }\n @Override\n public void onDrawerClosed() {\n if (drawerLayout.isDrawerOpen(Gravity.LEFT | Gravity.RIGHT)) {\n drawerLayout.closeDrawers(); }\n }\n }</string>
    <string name="view_para1">The term \'widget\' describes the parts of the Android app\'s UI (User Interface) that facilitate user interaction. One of the many such widgets that can be used to enhance the application\'s user interface is TextView. A TextView is a type of widget that shows text on the screen according to the layout, color, and other settings that are specific to that TextView. It also gives us the option to edit or modify it.\n\n Example :</string>
    <string name="view_para2"><![CDATA[shape.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?>\n <shape\n xmlns:android=\'http://schemas.android.com/apk/res/android\'\n android:shape=\'rectangle\'>\n <corners android:radius=\'10dp\' />\n <stroke android:width=\'2dp\' android:color=\'#ccc\' />\n <solid android:color=\'#ccc\' />\n </shape>\n\nactivity_main/xml\n\n <TextView\n android:id=\'@+id/textview\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginStart=\'@dimen/_10sdp\'\n android:text=\' Tap Here \'\n android:textColor=\'#4E3939\'\n android:background=\'@drawable/shape\'\n android:textSize=\'@dimen/headingtext\'\n android:textStyle=\'bold\' />\n <TextView\n android:id=\'@+id/textview1\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginStart=\'@dimen/_80sdp\'\n android:textColor=\'#D33434\'\n android:text=\'Welcome To\'\n android:textSize=\'@dimen/headingtext\'\n android:textStyle=\'bold\' />]]></string>
    <string name="view_para3">The term \'widget\' describes the parts of the UI (User Interface) that facilitate user interaction with Android applications. One of the many widgets that can be used to get text data from the user is edittext. The term \'edittext\' refers to the widget that shows a blank text field where a user can enter the necessary text, which is then used throughout our application.</string>
    <string name="view_para4"><![CDATA[activity_main.xml\n\n<EditText android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_marginHorizontal=\'@dimen/_30sdp\'\n android:hint=\'Enter Text\'\n android:textSize=\'@dimen/_10ssp\'/>]]></string>
    <string name="view_para5"><![CDATA[<ImageView\n android:layout_width=\'@dimen/_100sdp\'\n android:layout_height=\'@dimen/_100sdp\'\n android:layout_gravity=\'center\'\n android:src=\'@mipmap/youtube\'/>]]></string>
    <string name="view_para6">The Android application can display any type of image resource, including android.graphics.Bitmaps and android.graphics.drawables, by using the ImageView class.Drawable is a general abstraction for all Android objects that can be drawn. android.widget or the ImageView class. ImageView is derived from the android.view.View class, which is a Kotlin subclass. AnyClass. Using ImageView can also be used to create overlays on background images and apply tints to an image to reuse a drawable resource. Moreover, an image\'s size and movement can be managed using ImageView.</string>
    <string name="view_para7">A ListView is a particular kind of AdapterView that shows a list of scrollable views arranged vertically, one below the other. Items are added to the list from an array or database by using an adapter. To see the items in the list, use the setAdaptor() method. An adapter and the list are joined by the setAdaptor() method. Android ListView is a ViewGroup with an adapter that adds items to the list automatically. It is used to display a list of items in multiple rows. The adapter\'s primary function is to retrieve data from a database or array and add each item to the list in order to achieve the desired outcome.</string>
    <string name="view_para8"><![CDATA[activity_main.xml\n\n<ListView android:layout_width=\'wrap_content\'\n android:layout_height=\'@dimen/_50ssp\'\n android:layout_marginHorizontal=\'@dimen/_60sdp\'\n android:id=\'@+id/list\'/>]]></string>
    <string name="view_para9">The widget for android.The scroll view functionality is provided by the ScrollView class. The child elements of a palette inside of ScrollView are scrolled using ScrollView. As the default scroll view on Android, vertical scroll view is supported. Elements are scrolled vertically using Vertical ScrollView.\nFor horizontal ScrollView, Android uses HorizontalScrollView.</string>
    <string name="view_para10"><![CDATA[activity_main.xml\n\n<ScrollView\n android:layout_width=\'@dimen/_100sdp\'\n android:layout_height=\'@dimen/_100ssp\'\n android:scrollbars=\'vertical\'\n android:padding=\'@dimen/_10ssp\'\n android:layout_marginVertical=\'@dimen/_10ssp\'\n android:layout_gravity=\'center\'\n android:id=\'@+id/scv\'>\n <LinearLayout\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:orientation=\'vertical\'>\n <Button\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Button 1\'/>\n <Button\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Button 1\'/>\n <Button\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Button 1\'/>\n <Button\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Button 1\'/>\n </LinearLayout>\n </ScrollView>]]></string>
    <string name="view_para11">CardView is a new Android widget that can hold any kind of data and has a shadow and rounded corners. There are times when we need a method to show data in similarly styled containers (we can use such containers to hold information about items in the list). To display information within the cards that is consistent across all platforms, we have a CardView API. Because these cards have a default elevation above the view group they are contained in, the system creates shadows beneath them. When we need to group views together while maintaining a uniform look for the container, we use cards.</string>
    <string name="view_para12"><![CDATA[activity_main.xml\n\n<androidx.cardview.widget.CardView\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_marginHorizontal=\'@dimen/_30sdp\'\n app:cardElevation=\'15dp\'\n android:layout_marginVertical=\'@dimen/_10ssp\'\n android:id=\'@+id/cardv\'\n app:cardCornerRadius=\'@dimen/_10ssp\'>\n <LinearLayout\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:orientation=\'vertical\'\n android:layout_margin=\'@dimen/_10ssp\'>\n <TextView\n android:layout_width=\'wrap_content\'\n android:textColor=\'@color/black\'\n android:layout_height=\'wrap_content\'\n android:text=\'Name\'/>\n <TextView\n android:layout_width=\'wrap_content\'\n android:textColor=\'@color/black\'\n android:layout_height=\'wrap_content\'\n android:text=\' Age\'/>\n </LinearLayout>\n <LinearLayout\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_marginStart=\'@dimen/_50sdp\'\n android:layout_marginTop=\'@dimen/_10ssp\'\n android:orientation=\'vertical\'>\n <TextView\n android:layout_width=\'wrap_content\'\n android:textColor=\'@color/black\'\n android:layout_height=\'wrap_content\'\n android:text=\'User12345\'/>\n <TextView\n android:textColor=\'@color/black\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\' 20\'/>\n </LinearLayout>\n </androidx.cardview.widget.CardView>\n <androidx.cardview.widget.CardView\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_marginHorizontal=\'@dimen/_30sdp\'\n app:cardElevation=\'15dp\'\n android:layout_marginVertical=\'@dimen/_10ssp\'\n android:id=\'@+id/cardv\'\n app:cardCornerRadius=\'@dimen/_10ssp\'>\n <LinearLayout\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:orientation=\'vertical\'\n android:layout_margin=\'@dimen/_10ssp\'>\n <TextView\n android:layout_width=\'wrap_content\'\n android:textColor=\'@color/black\'\n android:layout_height=\'wrap_content\'\n android:text=\'Name\'/>\n <TextView\n android:textColor=\'@color/black\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\' Age\'/>\n </LinearLayout>\n <LinearLayout\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_marginStart=\'@dimen/_50sdp\'\n android:layout_marginTop=\'@dimen/_10ssp\'\n android:orientation=\'vertical\'>\n <TextView\n android:textColor=\'@color/black\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'User16745\'/>\n <TextView\n android:textColor=\'@color/black\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\' 23\'/>\n </LinearLayout>\n </androidx.cardview.widget.CardView>]]></string>
    <string name="vsp_para1">To view a video file on Android, use VideoView. It has the ability to load images from a variety of sources (including content providers or resources) and handles the measurement from the video to make the image suitable for any layout manager. It also offers display options like scaling and tinting.\n\nImportant Notice: When VideoView runs in the background, it does not stay in its entirety. Specifically, it doesn\'t return the play state and position to their original states. These should be saved and restored by applications using the onSaveInstanceState(Bundle) and onRestoreInstanceState(Bundle) functions.</string>
    <string name="vsp_para2"><![CDATA[activity_main.xml\n\n<VideoView\n android:layout_width=\'@dimen/_150sdp\'\n android:layout_gravity=\'center\'\n android:layout_marginVertical=\'@dimen/_30sdp\'\n android:layout_height=\'@dimen/_150sdp\'\n android:id=\'@+id/vv\'/>\n\nMainActivity.java\n\nVideoView videoView = findViewById(R.id.vv);\n Uri uri = Uri.parse(\'android.resource://\' + getPackageName() + \'/\' + R.raw.videoview);\n videoView.setVideoURI(uri);\n MediaController mediaController = new MediaController(this);\n mediaController.setAnchorView(videoView);\n videoView.setMediaController(mediaController);\n videoView.start();]]></string>
    <string name="vsp_para3">An interface for searching queries submitted through search providers is provided by Android SearchView. The SearchView widget can be incorporated into a layout or over ToolBars and ActionBars.\n\nBy default, SearchView can be collapsed, and its iconification can be adjusted using the setIconifiedByDefault(true) function of the SearchView class. SearchView makes use of the setIconifiedByDefault(false) method to make the search field visible.\n\nTechniques for SearchView\n\npublic boolean onQueryTextSubmit(String query): When content is submitted using the SearchView editor, the query is searched. It depends on the circumstances.\n\npublic boolean onQueryTextChange(String newText): Whenever the text changes in the SearchView editor, the query is searched.</string>
    <string name="vsp_para4"><![CDATA[activity_main.xml\n\n<ListView android:id=\'@+id/listView\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'fill_parent\' />\n\nMainActivity.java\n\n ListView listView;\n ArrayAdapter<String> adapter;\n ArrayList<String> mylist;\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n listView = findViewById(R.id.listView);\n mylist = new ArrayList<>();\n mylist.add(\'C\');\n mylist.add(\'C++\');\n mylist.add(\'C#\');\n mylist.add(\'Java\');\n mylist.add(\'Advanced java\');\n mylist.add(\'Interview prep with c++\');\n mylist.add(\'Interview prep with java\');\n mylist.add(\'data structures with c\');\n mylist.add(\'data structures with java\');\n adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, mylist);\n listView.setAdapter(adapter);}\n @Override\n public boolean onCreateOptionsMenu(Menu menu) {\n MenuInflater inflater = getMenuInflater();\n inflater.inflate(R.menu.menu, menu);\n MenuItem searchViewItem = menu.findItem(R.id.search_bar);\n SearchView searchView;\n searchView = (SearchView) MenuItemCompat.getActionView(searchViewItem);\n searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n @Override\n public boolean onQueryTextSubmit(String query) {\n if (mylist.contains(query)) {\n adapter.getFilter().filter(query);\n }else {\n // Search query not found in List View\n Toast.makeText(MainActivity.this, \'Not found\', Toast.LENGTH_LONG).show();}\n return false;}\n @Override\n public boolean onQueryTextChange(String newText) {\n adapter.getFilter().filter(newText);\n return false;}\n });\n return super.onCreateOptionsMenu(menu);\n }]]></string>
    <string name="gallry_para1">The Gallery view on Android allows items to be displayed in a center-locked, horizontal scrolling list. This allows the user to choose a view, which is then displayed in the list\'s center. The Adapter allows for the addition of \'N\' number of items. The adapter functions as a link between the data source and the user interface component. In the example, the gallery will display the items that are provided in the adapter. For Androi, we will use the programming languages Kotlin and Java to carry out this project.</string>
    <string name="gallry_para2"><![CDATA[activity_main.xml\n\n<ImageView\n android:id=\'@+id/imageView\'\n android:layout_width=\'fill_parent\'\n android:layout_height=\'200dp\'\n android:layout_margin=\'30sp\'\n android:scaleType=\'fitXY\' />\n <Gallery\n android:id=\'@+id/languagesGallery\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_marginTop=\'100dp\'\n android:animationDuration=\'2000\'\n android:padding=\'10dp\'\n android:spacing=\'5dp\'\n android:unselectedAlpha=\'50\' />\n\nMainActivity.java\n\nGallery simpleGallery;\n CustomizedGalleryAdapter customGalleryAdapter;\n ImageView selectedImageView;\n int[] images = {R.drawable.a, R.drawable.b, R.drawable.c, R.drawable.d, R.drawable.a, R.drawable.b, R.drawable.c, R.drawable.d};\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n simpleGallery = (Gallery) findViewById(R.id.languagesGallery);\n selectedImageView = (ImageView) findViewById(R.id.imageView);\n customGalleryAdapter = new CustomizedGalleryAdapter(getApplicationContext(), images);\n simpleGallery.setAdapter(customGalleryAdapter);\n simpleGallery.setOnItemClickListener((parent, view, position, id) -> {\n selectedImageView.setImageResource(images[position]);});\n }\n\nCustomizedGalleryAdapter.java\n\npublic class CustomizedGalleryAdapter extends BaseAdapter {\n private final Context context;\n private final int[] images;\n public CustomizedGalleryAdapter(Context c, int[] images) {\n context = c;\n this.images = images;}\n public int getCount() {\n return images.length;}\n public Object getItem(int position) {\n return position;}\n public long getItemId(int position) {\n return position;}\n @Override\n public View getView(int position, View convertView, ViewGroup parent) {\n ImageView imageView = new ImageView(context);\n imageView.setImageResource(images[position]);\n imageView.setLayoutParams(new Gallery.LayoutParams(200, 200));\n return imageView;}\n }]]></string>
    <string name="gallry_para3">With just one tap, users can navigate between top-level views and explore different areas with ease thanks to BottomNavigationView. A minimum of three and a maximum of five top-level views are required. Use the Navigation Drawer if there are more than five destinations. The top-level view will adjust in accordance with user taps on the icon. It can be used in a music player app to switch between Home, Album, and Radio. This widget is used by the Google Plus app to navigate between views. In order to navigate between Feeds, Search, Add, Like, and Profile, Instagram uses BottomNavigationView. This is the appearance of a BottomNavigationView.</string>
    <string name="gallry_para4"><![CDATA[Example Given below on activity bottom\n\nactivvity_main.xml\n\n<com.google.android.material.bottomnavigation.BottomNavigationView\n android:id=\'@+idbottombar\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'60sp\'\n android:layout_alignParentStart=\'true\'\n android:layout_alignParentBottom=\'true\'\n android:paddingHorizontal=\'@dimen_10ssp\'\n android:layout_marginBottom=\'@dimen_40sdp\'\n android:background=\'#A8C3C3\'>\n <Button\n android:layout_width=\'@dimen_50ssp\'\n android:layout_height=\'@dimen_30ssp\'\n android:layout_marginStart=\'@dimen_25sdp\'\n android:onClick=\'b1\'\n android:layout_marginTop=\'@dimen_10sdp\'\n android:text=\'B1\'>\n <Button\n android:layout_width=\'@dimen_50ssp\' android:layout_height=\'@dimen_30ssp\'\n android:onClick=\'b2\'\n android:layout_marginStart=\'@dimen_110sdp\'\n android:layout_marginTop=\'@dimen_10sdp\'\n android:text=\'B2\'>\n <Button\n android:layout_width=\'@dimen_50ssp\'\n android:layout_height=\'@dimen_30ssp\'\n android:onClick=\'b3\'\n android:layout_gravity=\'end\'\n android:layout_marginEnd=\'@dimen_50sdp\'\n android:layout_marginTop=\'@dimen_10sdp\'\n android:text=\'B3\'>\n <com.google.android.material.bottomnavigation.BottomNavigationView>\n\nMainActivity.java\n\npublic vid b1(View view){\nToast.makeText(this,\'B1 Clicked..\',Toast.LENGTH_SHORT).show();}\npublic void b2(View view){\nToast.makeText(this,\'B2 Clicked..\',Toast.LENGTH_SHORT).show();}\npublic void b3(View view){\nToast.makeText(this,\'B3 Clicked..\',Toast.LENGTH_SHORT).show();}]]></string>
    <string name="btn_para1">A button is a type of user interface in Android applications that, when clicked or tapped, causes an action to be taken. It is a very popular widget among Android developers. This post walks through the process of making a button in Android Studio.</string>
    <string name="btn_para2"><![CDATA[activity_main.xml\n\n<Button\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:background=\'@drawable/shape\'\n android:layout_gravity=\'center\'\n android:layout_marginVertical=\'@dimen/_10sdp\'\n android:text=\'Button 1\'\n android:textAppearance=\'null\'\n android:textSize=\'@dimen/_12ssp\'\n android:textStyle=\'bold\'\n android:textColor=\'@color/black\'\n />]]></string>
    <string name="btn_para3">RadioButton\n\nThe Android Radio Button is a two-state button with a check and an uncheck option. Additionally, it functions similarly to a checkbox with the exception that once selected, the radio button cannot be unchecked. To allow users to choose one option from a list of options, we typically use RadioButton controls. The Android:checked attribute allows us to modify the RadioButton\'s default state from its default state of OFF (Unchecked).\n\n RadioGroup\n\nThe Kotlin programming language\'s RadioGroup class is used to build a container that can house several RadioButtons. Because the RadioGroup class gives the radio buttons a multiple-exclusion scope feature, it is advantageous to place a set of radio buttons inside of it. This feature ensures that the user can select only one radio button out of all those that are part of a class called RadioGroup. The RadioGroup class unchecks the radio button that was previously checked if the user checks another one. When a developer wants to allow users to select only one response, like when they are asked about their gender, this feature is crucial.</string>
    <string name="btn_para4"><![CDATA[activity_main.xml\n\n<RadioGroup\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:orientation=\'horizontal\'\n android:layout_marginStart=\'@dimen/_30sdp\'\n android:id=\'@+id/rg1\'>\n <RadioButton\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:onClick=\'male\'\n android:text=\'Male\'/>\n <RadioButton\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:onClick=\'female\'\n android:text=\'Female\'/>\n </RadioGroup>]]></string>
    <string name="title_activity_loading_button">button</string>
    <string name="prgbtn_para1">To show the progress bar, use the ProgressDialog class. The subclass of the AlertDialog class in Android is called ProgressDialog. Methods for working with the progress bar, such as setProgress(), setMessage(), setProgressStyle(), setMax(), and show(), are provided by the ProgressDialog class. Progress Dialog has a progress range of 0 to 10,000.\n\nThis article adds a loading button to Android. Every time a user taps on LoadingButton, an incredible user interface and animation are presented to us. In an application, adding a LoadingButton is quite simple. It is essentially the same as an Android button; all you need to do is add a dependency and some properties. The Loading Button can be customized using tags such as BL_backgroundColor, BL_circleColor, BL_circleColorSecond, BL_stateShow, and many more. Wherever the developer wants the user to wait for a while, they use the Loading Button View. While Progress Bar is another option, Loading Button offers a more distinctive and eye-catching user interface and improves overall user experience. Because it can be tailored to the needs, it also gives the developer complete control.</string>
    <string name="prgbtn_para2"><![CDATA[implementation \'com.jpardogo.googleprogressbar:library:1.2.0\'\n\nMainActivity.java\n\nButton button, button2, button3, button4;\n Dialog dialog;\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_progress_loading);\n button = findViewById(R.id.button);\n button2 = findViewById(R.id.button2);\n button3 = findViewById(R.id.button3);\n button4 = findViewById(R.id.button4);\n button.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View view){\n dialog = new Dialog(ProgressLoadingActivity.this);\n dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n dialog.setContentView(R.layout.progress_bar_1);\n dialog.setCanceledOnTouchOutside(false);\n dialog.show();\n new CountDownTimer(8000, 3000) {\n @Override\n public void onTick(long l){}\n @Override\n public void onFinish(){dialog.dismiss();}\n }.start();\n }\n });\n button2.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View view){\n dialog = new Dialog(ProgressLoadingActivity.this);\n dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n dialog.setContentView(R.layout.progress_bar_2);\n dialog.setCanceledOnTouchOutside(false);\n dialog.show();\n new CountDownTimer(8000, 3000) {\n @Override\n public void onTick(long l){}\n @Override\n public void onFinish(){dialog.dismiss();}\n }.start();\n }\n });\n button3.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View view)\n{ dialog = new Dialog(ProgressLoadingActivity.this);\n dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n dialog.setContentView(R.layout.progress_bar_3);\n dialog.setCanceledOnTouchOutside(false); dialog.show();\n new CountDownTimer(8000, 3000) {\n @Override\n public void onTick(long l){}\n @Override\n public void onFinish(){dialog.dismiss();}\n }.start();\n }\n });\n button4.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View view)\n{ dialog = new Dialog(ProgressLoadingActivity.this);\n dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n dialog.setContentView(R.layout.progress_bar_4);\n dialog.setCanceledOnTouchOutside(false);\n dialog.show();\n new CountDownTimer(8000, 3000) {\n @Override\n public void onTick(long l){}\n @Override\n public void onFinish(){dialog.dismiss();}\n }.start();\n }\n });\n }\n public void prgbtn(View view) {setProgressDialog();}\n private void setProgressDialog() {\n int llPadding = 30;\n LinearLayout ll = new LinearLayout(this);\n ll.setOrientation(LinearLayout.HORIZONTAL);\n ll.setPadding(llPadding, llPadding, llPadding, llPadding);\n ll.setGravity(Gravity.START);\n LinearLayout.LayoutParams llParam = new LinearLayout.LayoutParams(\n LinearLayout.LayoutParams.WRAP_CONTENT,\n LinearLayout.LayoutParams.WRAP_CONTENT);\n llParam.gravity = Gravity.CENTER;\n ll.setLayoutParams(llParam);\n ProgressBar progressBar = new ProgressBar(this);\n progressBar.setIndeterminate(true);\n progressBar.setPadding(0, 0, 0, 0);\n progressBar.setLayoutParams(llParam);\n llParam = new LinearLayout.LayoutParams(\n ViewGroup.LayoutParams.WRAP_CONTENT,\n ViewGroup.LayoutParams.WRAP_CONTENT\n );\n llParam.gravity = Gravity.CENTER;\n TextView tvText = new TextView(this);\n tvText.setText(\' Loading ...\');\n tvText.setTextColor(Color.parseColor(\'#000000\'));\n tvText.setTextSize(20f);\n tvText.setLayoutParams(llParam);\n ll.addView(progressBar);\n ll.addView(tvText);\n AlertDialog.Builder builder = new AlertDialog.Builder(this);\n builder.setCancelable(true);\n builder.setView(ll);\n AlertDialog dialog = builder.create();\n dialog.show();\n Window window = dialog.getWindow();\n if (window != null) {\n WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();\n layoutParams.copyFrom(dialog.getWindow().getAttributes());\n layoutParams.width = LinearLayout.LayoutParams.WRAP_CONTENT;\n layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;\n dialog.getWindow().setAttributes(layoutParams);\n window.setFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE, WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\n}}\n\nprogress_bar.xml\n\n <com.jpardogo.android.googleprogressbar.library.GoogleProgressBar\n\n android:id=\'@+id/pg1\'\n android:layout_width=\'50dp\'\n android:layout_height=\'50dp\'\n android:layout_margin=\'10dp\'\n android:layout_centerHorizontal=\'true\'\n android:layout_below=\'@id/tv1\'\n gbp:type=\'nexus_rotation_cross\'/>\n <com.jpardogo.android.googleprogressbar.library.GoogleProgressBar\n android:id=\'@+id/pg1\'\n android:layout_width=\'50dp\'\n android:layout_height=\'50dp\'\n android:layout_margin=\'10dp\'\n android:layout_centerHorizontal=\'true\'\n android:layout_below=\'@id/tv1\'\n gbp:type=\'chrome_floating_circles\'/>\n <com.jpardogo.android.googleprogressbar.library.GoogleProgressBar\n android:id=\'@+id/pg1\'\n android:layout_width=\'50dp\'\n android:layout_height=\'50dp\'\n android:layout_margin=\'10dp\'\n android:layout_centerHorizontal=\'true\'\n android:layout_below=\'@id/tv1\'\n gbp:type=\'google_music_dices\'/>\n <com.jpardogo.android.googleprogressbar.library.GoogleProgressBar\n android:id=\'@+id/pg1\'\n android:layout_width=\'50dp\'\n android:layout_height=\'50dp\'\n android:layout_margin=\'10dp\'\n android:layout_centerHorizontal=\'true\'\n android:layout_below=\'@id/tv1\'\n gbp:type=\'folding_circles\'/>]]></string>
    <string name="prgbtn_para3">Compared to regular buttons, the floating action button is a little bit different. The developer has prioritized the actions under the floating action button, which are designated as primary or promoted actions for users in the app\'s user interface. For instance, adding something new to the list that already exists. Thus, the implementation of the Floating Action Button (FAB) and the handling of the buttons beneath the FABs with a straightforward Toast message are demonstrated in this article. Take note that the Java programming language will be used to implement this project.</string>
    <string name="prgbtn_para4"><![CDATA[\'activity_main.xml\n\n<com.google.android.material.floatingactionbutton.FloatingActionButton\n android:id=\'@+id/add_fab\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_gravity=\'end\'\n android:layout_marginEnd=\'16dp\'\n android:layout_marginBottom=\'16dp\'\n android:src=\'@drawable/ic_add_black_24dp\'\n app:fabSize=\'normal\'\n app:layout_constraintBottom_toBottomOf=\'parent\'\n app:layout_constraintEnd_toEndOf=\'parent\' />\n <com.google.android.material.floatingactionbutton.FloatingActionButton\n android:id=\'@+id/add_alarm_fab\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginBottom=\'24dp\'\n app:fabSize=\'normal\'\n app:layout_constraintBottom_toTopOf=\'@+id/add_fab\'\n app:layout_constraintEnd_toEndOf=\'@+id/add_fab\'\n app:layout_constraintStart_toStartOf=\'@+id/add_fab\'\n app:srcCompat=\'@drawable/ic_add_alarm_black_24dp\' />\n <TextView\n android:id=\'@+id/add_alarm_action_text\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginEnd=\'8dp\'\n android:text=\'Add Alarm\'\n app:layout_constraintBottom_toBottomOf=\'@+id/add_alarm_fab\'\n app:layout_constraintEnd_toStartOf=\'@+id/add_alarm_fab\'\n app:layout_constraintTop_toTopOf=\'@+id/add_alarm_fab\' />\n <com.google.android.material.floatingactionbutton.FloatingActionButton\n android:id=\'@+id/add_person_fab\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginBottom=\'24dp\'\n app:fabSize=\'normal\'\n app:layout_constraintBottom_toTopOf=\'@+id/add_alarm_fab\'\n app:layout_constraintEnd_toEndOf=\'@+id/add_alarm_fab\'\n app:layout_constraintStart_toStartOf=\'@+id/add_alarm_fab\'\n app:srcCompat=\'@drawable/ic_person_add_black_24dp\' />\n <TextView\n android:id=\'@+id/add_person_action_text\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginEnd=\'8dp\'\n android:text=\'Sync\'\n app:layout_constraintBottom_toBottomOf=\'@+id/add_person_fab\'\n app:layout_constraintEnd_toStartOf=\'@+id/add_person_fab\'\n app:layout_constraintTop_toTopOf=\'@+id/add_person_fab\' />\n\nMainActivity.java\n\n FloatingActionButton mAddFab, mAddAlarmFab, mAddPersonFab;\n TextView addAlarmActionText, addPersonActionText;\n Boolean isAllFabsVisible;\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n mAddFab = findViewById(R.id.add_fab);\n mAddAlarmFab = findViewById(R.id.add_alarm_fab);\n mAddPersonFab = findViewById(R.id.add_person_fab);\n addAlarmActionText = findViewById(R.id.add_alarm_action_text);\n addPersonActionText = findViewById(R.id.add_person_action_text);\n mAddAlarmFab.setVisibility(View.GONE);\n mAddPersonFab.setVisibility(View.GONE);\n addAlarmActionText.setVisibility(View.GONE);\n addPersonActionText.setVisibility(View.GONE);\n isAllFabsVisible = false;\n mAddFab.setOnClickListener(view -> {\n if (!isAllFabsVisible) {\n mAddAlarmFab.show();\n mAddPersonFab.show();\n addAlarmActionText.setVisibility(View.VISIBLE);\n addPersonActionText.setVisibility(View.VISIBLE);\n isAllFabsVisible = true;\n } else {\n mAddAlarmFab.hide();\n mAddPersonFab.hide();\n addAlarmActionText.setVisibility(View.GONE);\n addPersonActionText.setVisibility(View.GONE);\n isAllFabsVisible = false;}});\n mAddPersonFab.setOnClickListener(\n view -> Toast.makeText(MainActivity.this, \'Person Added\', Toast.LENGTH_SHORT).show());\n mAddAlarmFab.setOnClickListener(\n view -> Toast.makeText(MainActivity.this, \'Alarm Added\', Toast.LENGTH_SHORT).show());}]]></string>
    <string name="adpt_para1">The UI Component and the Data Source are connected by the Adapter. Data from the data sources is transformed into view items so that the UI Component can display them. The UI Components can be ListView, GridView, Spinner, etc., and the Data Source can be arrays, hash maps, databases, etc. The most widely used adapter for Android is the array adapter. ArrayAdapter is useful when you have a list of single type items that are kept in an array. Similarly, if you possess a list of names, phone numbers, or cities. ArrayAdapter features a single TextView in its layout. CustomArrayAdapter should be used in place of ArrayAdapter if you want a more intricate layout. The following is the basic syntax for an ArrayAdapter:\n\npublic ArrayAdapter(Context context, int resource, int textViewResourceId, T[] objects)</string>
    <string name="adpt_para2"><![CDATA[activity_main.xml\n\n<ListView\n android:layout_width=\'match_parent\'\n android:layout_marginHorizontal=\'@dimen/_30sdp\'\n android:layout_marginVertical=\'@dimen/_10sdp\'\n android:layout_height=\'@dimen/_100ssp\'\n android:id=\'@+id/list\'/>\n\nMainActivity.java\n\n ListView simpleListView;\n String courseList[] = { \'Cupcake\',\'Donut\',\'Eclair\',\'Froyo\',\'Gingerbread\',\'Honeycomb\',\'Ice Cream Sandwich\',\'Jelly Bean\',\'KitKat\'};\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_adapters);\n simpleListView = findViewById(R.id.list);\n ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(this,\n R.layout.item_view, R.id.itemTextView, courseList);\n simpleListView.setAdapter(arrayAdapter);\n }]]></string>
    <string name="adpt_para3">In Android, an adapter is used whenever we wish to bind data that we obtain from any type of data source (such as an ArrayList, HashMap, SQLite, etc.) with a user interface component (such as a ListView, GridView, etc.). Basically, the adapter serves as a link between the data sources and the user interface element. One kind of adapter used here is the simple adapter. It basically functions as a simple adapter for customizing List or Grid items by mapping static data to views specified in our XML file (a UI component). For data-backing, we utilize an ArrayList of Maps (such as hashmaps, mutable maps, etc.). An ArrayList\'s entries each correspond to a single list row. The data for every row is contained in the Map.</string>
    <string name="adpt_para4"><![CDATA[activity_main.xml\n\n<ListView\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'\n android:id=\'@+id/listview\'/>\n\nlist_row_items.xml\n\n <RelativeLayout xmlns:android=\'http://schemas.android.com/apk/res/android\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'>\n <ImageView\n android:layout_width=\'120sp\'\n android:layout_height=\'120sp\'\n android:scaleType=\'fitCenter\'\n android:padding=\'15dp\'\n android:src=\'@mipmap/profileimg\'\n android:id=\'@+id/imageview\'/>\n <TextView\n android:id=\'@+id/textView\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_marginTop=\'10dp\'\n android:layout_marginRight=\'20dp\'\n android:layout_toRightOf=\'@+id/imageview\'\n android:padding=\'5dp\'\n android:text=\'Text View\'\n android:textColor=\'#000000\'\n android:textSize=\'20sp\'\n android:textStyle=\'bold|italic\' />\n <TextView\n android:id=\'@+id/textView1\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_marginTop=\'40dp\'\n android:layout_marginRight=\'20dp\'\n android:layout_toRightOf=\'@+id/imageview\'\n android:padding=\'5dp\'\n android:text=\'Text View\'\n android:textColor=\'#000000\'\n android:textSize=\'20sp\'\n android:textStyle=\'bold|italic\' />\n </RelativeLayout> \n\nMainActivity.java\n\n ListView listView;\n String personname[] = {\'A\', \'B\', \'C\', \'D\', \'E\', \'F\'};\n String number[] = {\'1234567890\', \'14354353532\', \'34535354343\', \'2323343545\', \'2346353635\', \'2387423467\'};\n int uimages[] = {R.drawable.personimg, R.drawable.personimg, R.drawable.personimg, R.drawable.personimg, R.drawable.personimg, R.drawable.personimg};\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n listView = findViewById(R.id.listview);\n ArrayList<HashMap<String, Object>> list = new ArrayList<>();\n for(int i=0; i<personname.length; i++){\n HashMap<String,Object> map = new HashMap<>();\n map.put(\'personname\',personname[i]);\n map.put(\'number\',number[i]);\n map.put(\'uimages\',uimages[i]);\n list.add(map);}\n String[] from = {\'personname\',\'number\',\'uimages\'};\n int to[] = {R.id.textView,R.id.textView1,R.id.imageview};\n SimpleAdapter adapter = new SimpleAdapter(this,list,R.layout.list_row_items,from,to);\n listView.setAdapter(adapter);\n }]]></string>
    <string name="adpt_para5">A view called Android ExpandableListView is used to display items as a two-level list that scrolls vertically. ListView differs from other list views primarily in that it supports two levels of display: groups that are easily expandable and collapsible through touch, as well as the items that belong to each group\'s children. Android uses the ExpandableListViewAdapter to display the view. An ExpandableListView feature is necessary in many applications. As an illustration:\nIf a user wants to view a list of engineering colleges, art colleges, medical colleges, etc. in a \'city\' app (for any city), Lists of fruits, vegetables, nuts, etc., for an application similar to \'jiomart\' For an \'Uber\' type of app, a list of hatchbacks, crosscuts, sedans, etc.</string>
    <string name="adpt_para46"><![CDATA[activity_main.xml\n\n<ExpandableListView\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:id=\'@+id/expandablelistview\'\n android:divider=\'@android:color/darker_gray\'\n android:dividerHeight=\'0.5dp\'\n android:indicatorLeft=\'?android:attr/expandableListPreferredItemIndicatorLeft\' />\n <TextView\n android:id=\'@+id/Items\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:textSize=\'25sp\'\n android:textColor=\'@color/white\'/>\n\n list_group.xml\n\n <TextView\n android:id=\'@+id/listtitle\'\n android:layout_width=\'fill_parent\'\n android:layout_height=\'wrap_content\'\n android:paddingLeft=\'?android:attr/expandableListPreferredItemPaddingLeft\'\n android:paddingTop=\'10dp\'\n android:paddingBottom=\'10dp\'\n android:textColor=\'#428C84\'/>\n\n list_item.xml\n\n <TextView\n android:id=\'@+id/expandedListItem\'\n android:layout_width=\'fill_parent\'\n android:layout_height=\'wrap_content\'\n android:paddingLeft=\'?android:attr/expandableListPreferredChildPaddingLeft\'\n android:paddingTop=\'10dp\'\n android:textAllCaps=\'true\'\n android:textColor=\'#428C84\'\n android:paddingBottom=\'10dp\' />\n\n ExpandableListDataItems.java\n\n public static HashMap<String, List<String>> getData() {\n HashMap<String, List<String>> expandableDetailList = new HashMap<String, List<String>>();\n List<String> fruits = new ArrayList<String>();\n fruits.add(\'Apple\');\n fruits.add(\'Orange\');\n fruits.add(\'Guava\');\n fruits.add(\'Papaya\');\n fruits.add(\'Pineapple\');\n List<String> vegetables = new ArrayList<String>();\n vegetables.add(\'Tomato\');\n vegetables.add(\'Potato\');\n vegetables.add(\'Carrot\');\n vegetables.add(\'Cabbage\');\n vegetables.add(\'Cauliflower\');\n List<String> nuts = new ArrayList<String>();\n nuts.add(\'Cashews\');\n nuts.add(\'Badam\');\n nuts.add(\'Pista\');\n nuts.add(\'Raisin\');\n nuts.add(\'Walnut\');\n expandableDetailList.put(\'Fruits Items\', fruits);\n expandableDetailList.put(\'Vegetable Items\', vegetables);\n expandableDetailList.put(\'Nuts Items\', nuts);\n return expandableDetailList;\n }\n\n CustomizedExpandableListAdapter.java\n\n public class CustomizedExpandableListAdapter extends BaseExpandableListAdapter {\n private Context context;\n private List<String> expandableTitleList;\n private HashMap<String, List<String>> expandableDetailList;\n public CustomizedExpandableListAdapter(Context context, List<String> expandableTitleList, HashMap<String, List<String>> expandableDetailList) {\n this.context = context;\n this.expandableTitleList = expandableTitleList;\n this.expandableDetailList = expandableDetailList;}\n @Override\n public int getGroupCount() {\n return this.expandableTitleList.size();}\n @Override\n public int getChildrenCount(int groupPosition) {\n return this.expandableDetailList.get(this.expandableTitleList.get(groupPosition)).size();}\n @Override\n public Object getGroup(int groupPosition) {\n return this.expandableTitleList.get(groupPosition);}\n @Override\n public Object getChild(int groupPosition, int childPosition) {\n return this.expandableDetailList.get(this.expandableTitleList.get(groupPosition)).get(childPosition);}\n @Override\n public long getGroupId(int groupPosition) {return groupPosition;}\n @Override\n public long getChildId(int groupPosition, int childPosition) {return childPosition;}\n @Override\n public boolean hasStableIds() {return false;}\n @Override\n public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {\n String listTitle = (String) getGroup(groupPosition);\n if (convertView == null) {\n LayoutInflater layoutInflater = (LayoutInflater) this.context.\n getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n convertView = layoutInflater.inflate(R.layout.list_group, null);}\n TextView listTitleTextView = (TextView) convertView.findViewById(R.id.listtitle);\n listTitleTextView.setTypeface(null, Typeface.BOLD);\n listTitleTextView.setText(listTitle);\n return convertView;}\n @Override\n public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {\n final String expandedListText = (String) getChild(groupPosition, childPosition);\n if (convertView == null) {\n LayoutInflater layoutInflater = (LayoutInflater) this.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n convertView = layoutInflater.inflate(R.layout.list_items, null);}\n TextView expandedListTextView = (TextView) convertView.findViewById(R.id.expandedListItem);\n expandedListTextView.setText(expandedListText);\n return convertView;}\n @Override\n public boolean isChildSelectable(int groupPosition, int childPosition) {return true;}\n } \n\nMainActivity.java\n\n ExpandableListView listView;\n ExpandableListAdapter expandableListAdapter;\n List<String> expandableTitleList;\n TextView Items;\n HashMap<String, List<String>> expandableDetailList;\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n Items = findViewById(R.id.Items);\n listView = findViewById(R.id.expandablelistview);\n expandableDetailList = ExpandableListDataItems.getData();\n expandableTitleList = new ArrayList<>(expandableDetailList.keySet());\n expandableListAdapter = new CustomizedExpandableListAdapter(this, expandableTitleList, expandableDetailList);\n listView.setAdapter(expandableListAdapter);\n listView.setOnGroupExpandListener(new ExpandableListView.OnGroupExpandListener() {\n @Override\n public void onGroupExpand(int groupPosition) {\n Toast.makeText(MainActivity.this, expandableTitleList.get(groupPosition) + \' List Expanded.\', Toast.LENGTH_SHORT).show();}});\n listView.setOnGroupCollapseListener(new ExpandableListView.OnGroupCollapseListener() {\n @Override\n public void onGroupCollapse(int groupPosition) {\n Toast.makeText(getApplicationContext(), expandableTitleList.get(groupPosition) + \' List Collapsed.\', Toast.LENGTH_SHORT).show();}});\n listView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {\n @Override\n public boolean onChildClick(ExpandableListView parent, View v,int groupPosition, int childPosition, long id) {\n Items.setText(expandableTitleList.get(groupPosition)\n + \' -> \' + expandableDetailList.get(expandableTitleList.get(groupPosition)).get(childPosition));\n Toast.makeText(getApplicationContext(), expandableTitleList.get(groupPosition)\n + \' -> \' + expandableDetailList.get(expandableTitleList.get(groupPosition)).get(childPosition), Toast.LENGTH_SHORT).show();\n return false;}});\n }]]></string>
    <string name="adpt_para47">A subclass of the ViewAnimator class, the AdapterViewFlipper class is used to switch between two or more views so that only one view is visible at a time. It frequently appears in slides. It is a component of the transition widget that aids in adding views with transitions. Animating a view on the screen is the primary use case. AdapterViewFlipper allows for seamless switching between two or more views (TextView, ImageView, or any other Layout) and offers an appropriate animation-based method for doing so.</string>
    <string name="adpt_para8"><![CDATA[activity_main.xml\n\n<TextView\n android:id=\'@+id/heading\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:text=\'The North\'\n android:textSize=\'25sp\'\n android:textAlignment=\'center\'\n android:textColor=\'#CCB7B7\'\n android:textStyle=\'bold\'/>\n <AdapterViewFlipper\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:id=\'@+id/viewflipper\'\n android:layout_below=\'@id/heading\'\n android:layout_marginTop=\'10dp\'\n android:layout_centerHorizontal=\'true\'/>\n\n custom_adapter_layout.xml\n\n <ImageView\n android:id=\'@+id/image\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'250dp\'\n android:layout_alignParentTop=\'true\' />\n <TextView\n android:id=\'@+id/name\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_below=\'@id/image\'\n android:layout_centerHorizontal=\'true\'\n android:layout_marginTop=\'5dp\'\n android:textColor=\'#51E4B5\'\n android:textSize=\'20sp\' />\n\n MainActivity.java\n\n AdapterViewFlipper adapterViewFlipper;\n int[] images = {R.drawable.a, R.drawable.b, R.drawable.c, R.drawable.d};\n String[] names = {\'Nature\', \'Colorfull Pan\', \'Sun\', \'Land Cruiser\'};\n @SuppressLint(\'WrongViewCast\')\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n adapterViewFlipper = findViewById(R.id.viewflipper);\n CustomAdapter adapter = new CustomAdapter(getApplicationContext(), images,names);\n adapterViewFlipper.setAdapter(adapter);\n adapterViewFlipper.setFlipInterval(2600);\n adapterViewFlipper.setAutoStart(true);}\n public class CustomAdapter extends BaseAdapter {\n Context context;\n int[] images;\n String[] names;\n LayoutInflater inflater;\n public CustomAdapter(Context context, int[] images, String[] names) {\n this.context = context;\n this.images = images;\n this.names = names;\n inflater = LayoutInflater.from(context);}\n @Override\n public int getCount() {\n return names.length;}\n @Override\n public Object getItem(int position) {return null;}\n @Override\n public long getItemId(int position) {return 0;}\n @SuppressLint(\'ViewHolder\')\n @Override\n public View getView(int position, View view, ViewGroup parent) {\n view = inflater.inflate(R.layout.custom_adapter_layout, null);\n TextView name = view.findViewById(R.id.name);\n ImageView image = view.findViewById(R.id.image);\n name.setText(names[position]);\n image.setImageResource(images[position]);\n return view;}\n }]]></string>
    <string name="adpt_para9">The developer of many Android apps might have to display multi-data for large main data items. For example, in our example, we would need to display Python, Java, and so on under \'Programming languages,\' and we would need to display Oracle, MySQL, and so on under \'Relational database.\' We can use \'BaseExpandableListAdapter\' for that purpose. It serves as a link between the UI component and the data source, providing the UI component with data. It stores the data and then sends it to the Adapter view, from which the view can retrieve the data and display it on various views, such as the ExpandableListView. In addition to instantiating views for the children and groups, it will grant access to the children\'s data that has been categorized by groups.</string>
    <string name="adpt_para10"><![CDATA[activity_main.xml\n\n<ExpandableListView\n android:layout_width=\'match_parent\'\n android:layout_height=\'fill_parent\'\n android:id=\'@+id/expandablelistview\'\n android:dividerHeight=\'2dp\'\n android:divider=\'@color/black\'/>\n\n child_items.xml\n\n<TextView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:id=\'@+id/childitem\'\n android:layout_alignParentTop=\'true\'\n android:layout_marginLeft=\'15dp\'\n android:textAppearance=\'?android:attr/textAppearanceMedium\'/>\n\n group_items.xml\n\n <TextView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:id=\'@+id/groupitem\'\n android:paddingLeft=\'35sp\'\n android:textAppearance=\'?android:attr/textAppearanceLarge\'\n android:textStyle=\'bold\' />\n\n ChildInfo.java\n\n public class ChildInfo {\n private String name = \'\';\n public String getName() {return name;}\n public void setName(String name) {this.name = name;}}\n\n GroupInformation.java\n\n public class GroupInformation {\n private String mainSetName;\n private ArrayList<ChildInfo> list = new ArrayList<ChildInfo>();\n public String getName() {\n return mainSetName;}\n public void setName(String mainSetName) {this.mainSetName = mainSetName;}\n public ArrayList<ChildInfo> getSubsetName() {return list;}\n public void setSubsetName(ArrayList<ChildInfo> subSetName) {\n this.list = subSetName;}}\n\n CustomizedAdapter .java\n\n public class CustomizedAdapter extends BaseExpandableListAdapter {\n private Context context;\n private ArrayList<GroupInformation> mainSetName;\n public CustomizedAdapter(Context context, ArrayList<GroupInformation> deptList) {\n this.context = context;\n this.mainSetName = deptList;}\n @Override\n public int getGroupCount() {\n return mainSetName.size();}\n @Override\n public int getChildrenCount(int groupPosition) {\n ArrayList<ChildInfo> productList = mainSetName.get(groupPosition).getSubsetName();\n return productList.size();}\n @Override\n public Object getGroup(int groupPosition) {return mainSetName.get(groupPosition);}\n @Override\n public Object getChild(int groupPosition, int childPosition) {\n ArrayList<ChildInfo> productList = mainSetName.get(groupPosition).getSubsetName();\n return productList.get(childPosition);}\n @Override\n public long getGroupId(int groupPosition) {return groupPosition;}\n @Override\n public long getChildId(int groupPosition, int childPosition) {return childPosition;}\n @Override\n public boolean hasStableIds() {return true;}\n @Override\n public View getGroupView(int groupPosition, boolean isExpanded, View view, ViewGroup parent) {\n GroupInformation headerInfo = (GroupInformation) getGroup(groupPosition);\n if (view == null) {\n LayoutInflater inf = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n view = inf.inflate(R.layout.group_items, null);}\n TextView heading = view.findViewById(R.id.groupitem);\n heading.setText(headerInfo.getName().trim());\n return view;}\n @Override\n public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View view, ViewGroup parent) {\n ChildInfo detailInfo = (ChildInfo) getChild(groupPosition, childPosition);\n if (view == null) {\n LayoutInflater infalInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);}\n TextView childItem = view.findViewById(R.id.childitem);\n childItem.setText(detailInfo.getName().trim());\n return view;}\n @Override\n public boolean isChildSelectable(int groupPosition, int childPosition) {return true;}\n }\n\n MainActtivity.java\n\n private LinkedHashMap<String, GroupInformation> mainSet = new LinkedHashMap<String, GroupInformation>();\n private ArrayList<GroupInformation> subSet = new ArrayList<GroupInformation>();\n private CustomizedAdapter listAdapter;\n private ExpandableListView simpleExpandableListView1;\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n loadData();\n simpleExpandableListView1 = (ExpandableListView) findViewById(R.id.expandablelistview);\n listAdapter = new CustomizedAdapter(MainActivity.this, subSet);\n simpleExpandableListView1.setAdapter(listAdapter);\n simpleExpandableListView1.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {\n @Override\n public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {\n GroupInformation headerInfo = subSet.get(groupPosition);\n ChildInfo detailInfo = headerInfo.getSubsetName().get(childPosition);\n Toast.makeText(getBaseContext(), headerInfo.getName() + \'/\' + detailInfo.getName(), Toast.LENGTH_LONG).show();\n return false;}\n });\n simpleExpandableListView1.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() {\n @Override\n public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) {\n GroupInformation headerInfo = subSet.get(groupPosition);\n Toast.makeText(getBaseContext(), headerInfo.getName(), Toast.LENGTH_LONG).show();\n return false;}\n });\n }\n private void loadData() {\n addDetails(\'Programming_Languages\', \'Python\');\n addDetails(\'Programming_Languages\', \'Java\');\n addDetails(\'Programming_Languages\', \'Kotlin\');\n addDetails(\'Programming_Languages\', \'NodeJS\');\n addDetails(\'Programming_Languages\', \'GO\');\n addDetails(\'Relational_Database\', \'Oracle\');\n addDetails(\'Relational_Database\', \'SQLServer\');\n addDetails(\'Relational_Database\', \'MySQL\');\n addDetails(\'NoSQL_Database\', \'MongoDB\');\n addDetails(\'NoSQL_Database\', \'Cassandra\');\n addDetails(\'NoSQL_Database\', \'CouchDB\');}\n private int addDetails(String mainSet, String subSet) {\n int groupPosition = 0;\n GroupInformation headerInfo = this.mainSet.get(mainSet);\n if (headerInfo == null) {\n headerInfo = new GroupInformation();\n headerInfo.setName(mainSet);\n this.mainSet.put(mainSet, headerInfo);\n this.subSet.add(headerInfo);}\n ArrayList<ChildInfo> subList = headerInfo.getSubsetName();\n int listSize = subList.size();\n listSize++;\n ChildInfo detailInfo = new ChildInfo();\n detailInfo.setName(subSet);\n subList.add(detailInfo);\n headerInfo.setSubsetName(subList);\n groupPosition = this.subSet.indexOf(headerInfo);\n return groupPosition;\n}]]></string>
    <string name="bar_para1">ActionBar is the element that appears at the top of the activity screen in Android applications. It is a prominent feature of a mobile application that is present in every action it takes. It contains some of the elements that users use most frequently and gives the app a visual structure. Google released Android 3.0 (API 11) in 2013 along with the Android ActionBar. This top-most visual element was known as AppBar prior to that. Only the application name or active activity is displayed in the AppBar. Users did not find it particularly useful, and developers had very little control over how it was customized.</string>
    <string name="bar_para2"><![CDATA[activity_main.xml\n\n<androidx.appcompat.widget.Toolbar\n android:id=\'@+id/toolbar1\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:background=\'#80A9E8\'\n android:theme=\'@style/ThemeOverlay.AppCompat.Dark.ActionBar\'\n app:layout_constraintEnd_toEndOf=\'parent\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\'\n app:logo=\'@mipmap/logogo\'\n app:popupTheme=\'@style/ThemeOverlay.AppCompat.Light\'\n app:title=\'Instagram\'\n app:titleMarginStart=\'25sp\'/>\n actionbar_menu.xml\n\n <?xml version=\'1.0\' encoding=\'utf-8\'?>\n <menu xmlns:tools=\'http://schemas.android.com/tools\'\n xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:app=\'http://schemas.android.com/apk/res-auto\'>\n <item\n android:title=\'Camera\'\n android:id=\'@+id/camera\'\n android:icon=\'@mipmap/gallry\'\n app:showAsAction=\'ifRoom\'/>\n <item\n android:title=\'search\'\n android:id=\'@+id/search\'\n android:icon=\'@mipmap/search\'\n app:showAsAction=\'ifRoom|collapseActionView\'\n app:actionViewClass=\'android.widget.SearchView\' />\n <item\n android:title=\'Camera\'\n android:id=\'@+id/vcamera\'\n android:icon=\'@drawable/baseline_videocam_24\'\n app:showAsAction=\'ifRoom\'/>\n <item\n android:title=\'Home\'\n android:id=\'@+id/A1\'/>\n <item\n android:title=\'About\'\n android:id=\'@+id/A2\'/>\n </menu>\n\n MainActivity.java\n\n toolbar = findViewById(R.id.toolbar1);\n setSupportActionBar(toolbar);\n toolbar.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View v) {\n Toast.makeText(MainActivity.this, \'More !!!\', Toast.LENGTH_SHORT).show();}\n });\n @Override\n public boolean onCreateOptionsMenu(Menu menu) {\n getMenuInflater().inflate(R.menu.actionbar_menu,menu);\n return true;}\n @Override\n public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n int id = item.getItemId();\n if(id == R.id.A1){\n Toast.makeText(this, \'Create A1 new Group!!!!\', Toast.LENGTH_SHORT).show();}\n if(id == R.id.camera){\n Toast.makeText(this, \'Gallary !!!\', Toast.LENGTH_SHORT).show();}\n if(id == R.id.A2){\n Toast.makeText(this, \'Create A2 new Group!!!!\', Toast.LENGTH_SHORT).show();}\n return true;}]]></string>
    <string name="bar_para3">Toolbar is a type of ViewGroup that can be added to an activity\'s XML layout in Android applications. The Google Android team unveiled it alongside the release of Android Lollipop (API 21). In essence, the Toolbar is the ActionBar\'s more sophisticated replacement. In terms of functionality and appearance, it is far more adaptable and customizable. Its location is not hardcoded, that is, it is not at the top of an activity, in contrast to ActionBar. Like any other Android view, developers can position it anywhere in the activity based on the needs of the user. Toolbar supports backward compatibility up to API 7 (Android 2.1) by utilizing Android\'s material design theme features. There are two ways to utilize the Toolbar:\n\n1. Use as an ActionBar: To give an app more personalization and a nicer look, the toolbar can be used as an ActionBar. Toolbar supports every ActionBar feature, including ActionBarDrawerToogle and menu inflation.\n\n2. Employ a stand-alone Toolbar: It can be used to implement specific application designs that an ActionBar is unable to fulfill. For instance, displaying more than one Toolbar in an activity or placing a Toolbar somewhere other than at the top.</string>
    <string name="bar_para4"><![CDATA[activity_main.xml\n\n<com.google.android.material.appbar.AppBarLayout\n android:id=\'@+id/appBarLayout\'\n android:layout_width=\'0dp\'\n android:layout_height=\'wrap_content\'\n app:layout_constraintEnd_toEndOf=\'parent\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\'>\n <androidx.constraintlayout.widget.ConstraintLayout\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'>\n <androidx.appcompat.widget.Toolbar\n android:id=\'@+id/toolbar1\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:background=\'#0F9D58\'\n android:minHeight=\'?attr/actionBarSize\'\n android:theme=\'?attr/actionBarTheme\'\n app:layout_constraintEnd_toEndOf=\'parent\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\'\n app:title=\' AndyBase | Tool bar\'\n app:titleTextColor=\'#ffff\' />\n <TextView\n android:id=\'@+id/textView2\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginEnd=\'15dp\'\n android:text=\'0\'\n android:textColor=\'#ffff\'\n android:textSize=\'18sp\'\n android:textStyle=\'bold\'\n app:layout_constraintBottom_toBottomOf=\'parent\'\n app:layout_constraintEnd_toEndOf=\'@+id/toolbar1\'\n app:layout_constraintTop_toTopOf=\'parent\' />\n <ImageView\n android:id=\'@+id/imageView2\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'24dp\'\n android:layout_marginEnd=\'9dp\'\n app:layout_constraintBottom_toBottomOf=\'parent\'\n app:layout_constraintEnd_toStartOf=\'@+id/textView2\'\n app:layout_constraintTop_toTopOf=\'parent\'\n app:srcCompat=\'@mipmap/search\' />\n </androidx.constraintlayout.widget.ConstraintLayout>\n </com.google.android.material.appbar.AppBarLayout>\n MainActivity.java\n\ntoolbar = findViewById(R.id.toolbar1);\n setSupportActionBar(toolbar);\n toolbar.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View v) {\n Toast.makeText(MainActivity.this, \'More !!!\', Toast.LENGTH_SHORT).show();}\n });\n textView = (TextView) findViewById(R.id.textView2);\n textView.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick( View view ) {\n count++;\n textView.setText(\'\' + count);}\n })]]></string>
    <string name="bar_para5">One kind of ProgressBar is the Android SeekBar. The progress bar\'s current value changes when the thumb touches it and is dragged to the right or left. Songs, videos, and other media can be forward or backward-directed using SeekBar. Three methods are available via the setOnSeekBarChangeListener interface.\n \n1. onProgressChanged: This method modifies progress, and the progress value is subsequently used in our logic in accordance with this modification. \n2. onStartTrackingTouch: This method will automatically invoke itself once the user begins dragging. \n3. onStopTrackingTouch: This method will automatically invoke itself when the user stops dragging.</string>
    <string name="bar_para6"><![CDATA[activity_main.xml\n\n<RelativeLayout\n android:id=\'@+id/relativeLayout\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n app:layout_constraintBottom_toBottomOf=\'parent\'\n app:layout_constraintEnd_toEndOf=\'parent\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\'\n app:layout_constraintVertical_bias=\'0.217\'>\n <TextView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_gravity=\'start\'\n android:layout_marginStart=\'10sp\'\n android:text=\'SeekBar\'\n android:textStyle=\'bold\' />\n <TextView\n android:id=\'@+id/message_id\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_alignParentStart=\'true\'\n android:layout_alignParentTop=\'true\'\n android:layout_gravity=\'center\'\n android:layout_marginStart=\'44dp\'\n android:layout_marginTop=\'40dp\'\n android:text=\'Hey Cypress\'\n android:textSize=\'20sp\'\n android:textStyle=\'bold\' />\n <SeekBar\n android:id=\'@+id/seekbar\'\n android:layout_width=\'fill_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_alignParentTop=\'true\'\n android:layout_marginTop=\'90dp\'\n android:max=\'150\' />\n </RelativeLayout>\n\n MainActivity.java\n\n Text_message = findViewById(R.id.message_id);\n seekbar = findViewById(R.id.seekbar);\n seekbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n @Override\n public void onProgressChanged(\n SeekBar seekBar,\n int progress,\n boolean fromUser){\n Text_message.setTextSize(progress + 1);}\n @Override\n public void onStartTrackingTouch(SeekBar seekBar)\n {}\n @Override\n public void onStopTrackingTouch(SeekBar seekBar)\n {}\n });]]></string>
    <string name="bar_para7">Android discrete SeekBar is an extension of ProgressBar that has a draggable thumb. Users can use the thumb back and forth to set the current progress of the SeekBar. Discrete SeekBar works for discrete values.</string>
    <string name="bar_para8"><![CDATA[activity_main.xml\n\n<LinearLayout\n android:id=\'@+id/linearLayout\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'100sp\'\n android:layout_marginTop=\'150dp\'\n android:gravity=\'center\'\n android:orientation=\'vertical\'\n app:layout_constraintEnd_toEndOf=\'parent\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'@+id/relativeLayout\'>\n <TextView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_gravity=\'start\'\n android:layout_marginStart=\'10sp\'\n android:text=\'Discrete SeekBar\'\n android:textStyle=\'bold\' />\n <SeekBar\n android:id=\'@+id/seekBar1\'\n style=\'@style/Widget.AppCompat.SeekBar.Discrete\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:max=\'5\'\n android:progress=\'2\'\n android:layout_marginTop=\'20dp\'\n tools:layout_editor_absoluteX=\'0dp\'\n tools:layout_editor_absoluteY=\'310dp\' />\n </LinearLayout>\n\n MainActivity.java\n\n seekbar1 = findViewById(R.id.seekBar1);\n if (seekbar1 != null) {\n seekbar1.setOnSeekBarChangeListener(\n new SeekBar.OnSeekBarChangeListener() {\n @Override\n public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser){\n Text_message.setTextSize(progress + 10);}\n @Override\n public void onStartTrackingTouch(SeekBar seekBar){}\n @Override\n public void onStopTrackingTouch(\n SeekBar seekBar){\n Toast.makeText(MainActivity.this, \'Current value is \' + seekBar.getProgress(), Toast.LENGTH_SHORT).show();}\n });\n }]]></string>
    <string name="bar_para9">The purpose of RatingBar is to let users rate certain products. The getRating() function is used in the code below to determine the product ratings. The double type value is returned by the getRating() function.</string>
    <string name="bar_para10"><![CDATA[activity_main.xml\n\n<RatingBar android:id=\'@+id/ratingBar\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginTop=\'104dp\'\n android:background=\'#F8F7F7\'\n app:layout_constraintLeft_toLeftOf=\'parent\'\n app:layout_constraintRight_toRightOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\'\n tools:layout_constraintLeft_creator=\'1\'\n tools:layout_constraintRight_creator=\'1\'\n tools:layout_constraintTop_creator=\'1\' />\n <TextView\n android:id=\'@+id/textView\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginStart=\'41dp\'\n android:layout_marginTop=\'28dp\'\n android:text=\'Rate Me!!!\'\n android:textColor=\'@android:color/background_dark\'\n android:textSize=\'30sp\'\n android:textStyle=\'bold|italic\'\n app:layout_constraintStart_toStartOf=\'@+id/ratingBar\'\n app:layout_constraintTop_toTopOf=\'parent\' />\n <TextView\n android:id=\'@+id/textView2\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginTop=\'148dp\'\n android:textColorHint=\'@color/black\'\n android:textSize=\'24sp\'\n app:layout_constraintLeft_toLeftOf=\'parent\'\n app:layout_constraintRight_toRightOf=\'parent\'\n app:layout_constraintTop_toBottomOf=\'@+id/ratingBar\'\n tools:layout_constraintLeft_creator=\'1\'\n tools:layout_constraintRight_creator=\'1\' />\n <Button\n android:id=\'@+id/button\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginTop=\'40dp\'\n android:layout_marginBottom=\'50dp\'\n android:background=\'@android:color/holo_red_dark\'\n android:onClick=\'Call\'\n android:text=\'Submit\'\n android:textColor=\'@android:color/background_light\'\n android:textStyle=\'bold|italic\'\n app:layout_constraintBottom_toTopOf=\'@+id/textView2\'\n app:layout_constraintEnd_toEndOf=\'parent\'\n app:layout_constraintLeft_toLeftOf=\'parent\'\n app:layout_constraintRight_toRightOf=\'parent\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toBottomOf=\'@+id/ratingBar\'\n app:layout_constraintVertical_bias=\'0.0\'\n tools:layout_constraintBottom_creator=\'1\'\n tools:layout_constraintLeft_creator=\'1\'\n tools:layout_constraintRight_creator=\'1\'\n tools:layout_constraintTop_creator=\'1\' />\n\n MainActivity.java\n\n RatingBar rt;\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n rt = (RatingBar) findViewById(R.id.ratingBar);\n LayerDrawable stars=(LayerDrawable)rt.getProgressDrawable();\n stars.getDrawable(2).setColorFilter(Color.YELLOW, PorterDuff.Mode.SRC_ATOP);}\n public void Call(View v){\n TextView t = (TextView)findViewById(R.id.textView2);\n t.setText(\'You Rated :\'+String.valueOf(rt.getRating()));}]]></string>
    <string name="bar_para11">Snackbar offers brief commentary on an activity. On smaller devices, the message appears at the bottom of the screen; on larger devices, it appears lower left. Above every element on the screen is the Snackbar. However, it has no effect on any component. Snackbar can only function properly when a CoordinatorLayout is present in your view hierarchy. This is how features like swipe-to-dismiss and widget movement automation work. The primary distinction between Toast and Snackbar is that Toast does not allow for the addition of actions.</string>
    <string name="bar_para12"><![CDATA[activity_main.xml\n\n<Button\n android:id=\'@+id/showSnackbarButton\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_centerInParent=\'true\'\n android:layout_marginStart=\'108dp\'\n android:layout_marginTop=\'188dp\'\n android:backgroundTint=\'#AE4C93\'\n android:text=\'SHOW SNACKBAR\'\n android:textColor=\'@android:color/white\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\' />\n custom_snackbar_view.xml\n\n <RelativeLayout\n xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:app=\'http://schemas.android.com/apk/res-auto\'\n xmlns:tools=\'http://schemas.android.com/tools\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'\n tools:ignore=\'HardcodedText\'>\n <androidx.cardview.widget.CardView\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_margin=\'8dp\'\n android:elevation=\'4dp\'\n app:cardBackgroundColor=\'#BA9895\'\n app:cardCornerRadius=\'4dp\'\n app:cardPreventCornerOverlap=\'true\'\n app:cardUseCompatPadding=\'true\'>\n <RelativeLayout\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'\n android:padding=\'8dp\'>\n <ImageView\n android:id=\'@+id/imageView\'\n android:layout_width=\'45dp\'\n android:layout_height=\'45dp\'\n android:layout_alignParentStart=\'true\'\n android:src=\'@mipmap/search\' />\n <TextView\n android:id=\'@+id/textView1\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_marginStart=\'4dp\'\n android:layout_toEndOf=\'@id/imageView\'\n android:text=\'Google Buissness\'\n android:textAlignment=\'center\'\n android:textColor=\'@android:color/white\'\n android:textSize=\'18sp\'\n android:textStyle=\'bold\' />\n <TextView\n android:id=\'@+id/textView2\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_below=\'@id/textView1\'\n android:layout_marginStart=\'4dp\'\n android:layout_toEndOf=\'@id/imageView\'\n android:text=\'Business Portal\'\n android:textColor=\'@android:color/white\'\n android:textSize=\'14sp\' />\n <View\n android:layout_width=\'2dp\'\n android:layout_height=\'45dp\'\n android:layout_toStartOf=\'@id/gotoWebsiteButton\'\n android:background=\'@android:color/white\' />\n <Button\n android:id=\'@+id/gotoWebsiteButton\'\n style=\'@style/Widget.MaterialComponents.Button.TextButton\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_alignParentEnd=\'true\'\n android:text=\'GOTO WEBSITE\'\n android:textColor=\'@android:color/white\'\n android:textSize=\'14sp\' />\n </RelativeLayout>\n </androidx.cardview.widget.CardView>\n </RelativeLayout>\n\n MainActivity.java\n\n bShowSnackbar = findViewById(R.id.showSnackbarButton);\n bShowSnackbar.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View v) {\n final Snackbar snackbar = Snackbar.make(v, \'\', Snackbar.LENGTH_LONG);\n View customSnackView = getLayoutInflater().inflate(R.layout.custom_snackbar_view, null);\n snackbar.getView().setBackgroundColor(Color.TRANSPARENT);\n @SuppressLint(\'RestrictedApi\') Snackbar.SnackbarLayout snackbarLayout = (Snackbar.SnackbarLayout) snackbar.getView();\n snackbarLayout.setPadding(0, 0, 0, 0);\n Button bGotoWebsite = customSnackView.findViewById(R.id.gotoWebsiteButton);\n bGotoWebsite.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View v) {\n Toast.makeText(getApplicationContext(), \'Redirecting to Website!!!\', Toast.LENGTH_SHORT).show();\n snackbar.dismiss();}\n });\n snackbarLayout.addView(customSnackView, 0);\n snackbar.show();}\n });]]></string>
    <string name="bar_para13">This article describes the implementation of RangeSeekbar in an Android application. One kind of progress bar is the Android Seekbar. The progress can be changed by dragging the seekbar from left to right and vice versa. Here, we add a custom seekbar to our application using the RangeSeekbar library. This library is far superior to Android\'s seekbar because it offers us a lot more features like mode, steps, and thumbDrawable.</string>
    <string name="bar_para14"><![CDATA[activity_main.xml\n\n<TextView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:id=\'@+id/tv\'\n android:text=\'Range Seekbar \'\n android:textColor=\'#189C1E\'\n android:textSize=\'25sp\'\n app:layout_constraintBottom_toBottomOf=\'parent\'\n app:layout_constraintEnd_toEndOf=\'parent\'\n app:layout_constraintLeft_toLeftOf=\'parent\'\n app:layout_constraintRight_toRightOf=\'parent\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\'\n app:layout_constraintVertical_bias=\'0.319\' />\n <TextView\n android:id=\'@+id/textView\'\n android:layout_width=\'403dp\'\n android:layout_height=\'wrap_content\'\n android:layout_marginTop=\'20dp\'\n android:gravity=\'center\'\n android:text=\'Set difficulty for problem:-\'\n android:textSize=\'20sp\'\n app:layout_constraintEnd_toEndOf=\'parent\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toBottomOf=\'@id/tv\' />\n <com.jaygoo.widget.RangeSeekBar\n android:id=\'@+id/range_seekbar\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n app:layout_constraintBottom_toBottomOf=\'parent\'\n app:layout_constraintEnd_toEndOf=\'parent\'\n app:layout_constraintHorizontal_bias=\'0.0\'\n app:layout_constraintLeft_toLeftOf=\'parent\'\n app:layout_constraintRight_toRightOf=\'parent\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toBottomOf=\'@id/textView\'\n app:layout_constraintVertical_bias=\'0.063\'\n app:rsb_gravity=\'bottom\'\n app:rsb_indicator_background_color=\'#4977BC\'\n app:rsb_indicator_height=\'30dp\'\n app:rsb_indicator_width=\'0dp\'\n app:rsb_mode=\'single\'\n app:rsb_progress_color=\'#4977BC\'\n app:rsb_step_auto_bonding=\'true\'\n app:rsb_step_color=\'#4977BC\'\n app:rsb_step_height=\'10dp\'\n app:rsb_step_width=\'5dp\'\n app:rsb_steps=\'4\'\n app:rsb_thumb_drawable=\'@drawable/rsb_default_thumb\'\n app:rsb_tick_mark_layout_gravity=\'bottom\'\n app:rsb_tick_mark_mode=\'other\'\n app:rsb_tick_mark_text_array=\'@array/levelArray\'\n app:rsb_tick_mark_text_margin=\'20dp\' />\n\n MainActivity.java\n\n RangeSeekBar rangeSeekBar = findViewById(R.id.range_seekbar);\n rangeSeekBar.setOnRangeChangedListener(new OnRangeChangedListener() {\n @Override\n public void onRangeChanged(RangeSeekBar rangeSeekBar, float leftValue, float rightValue, boolean isFromUser) {\n Toast.makeText(MainActivity.this, String.valueOf(leftValue), Toast.LENGTH_LONG).show();}\n @Override\n public void onStartTrackingTouch(RangeSeekBar view, boolean isLeft) {}\n @Override\n public void onStopTrackingTouch(RangeSeekBar view, boolean isLeft) {}\n });\n if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\n hideSystemUI();}\n }\n @RequiresApi(Build.VERSION_CODES.R)\n private void hideSystemUI() {\n WindowCompat.setDecorFitsSystemWindows(getWindow(), false);\n WindowInsetsControllerCompat controller = new WindowInsetsControllerCompat(getWindow(), getWindow().getDecorView().findViewById(android.R.id.content));\n controller.hide(WindowInsetsCompat.Type.systemBars());\n controller.setSystemBarsBehavior(WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE);\n }]]></string>
    <string name="chart_para1">A pie chart is a statistical graphic that is circular and has been divided into slices to show numerical proportions. It shows a unique pie chart with sectors that represent the relative sizes of the data. Also referred to as a circle graph, a circular chart is divided into segments that represent relative frequencies or magnitude using radii. In a pie chart, numbers are shown as percentages, and the total of each segment\'s sum must equal 100%.</string>
    <string name="chart_para2"><![CDATA[activity_main.xml\n\n<org.eazegraph.lib.charts.PieCart\n xmlns:app=\'http://schemas.android.com/apk/res-auto\'\n android:id=\'@+id/piechart\'\n android:layout_width=\'0dp\'\n android:layout_height=\'match_parent\'\n android:layout_marginLeft=\'15dp\'\n android:layout_marginTop=\'15dp\'\n android:layout_marginBottom=\'15dp\'\n android:layout_weight=\'1\'\n android:padding=\'6dp\'/>\n MainActivity.java\n\ntvR.setText(r.getText().toString());\n\n tvPython.setText(py.getText().toString());\n tvCPP.setText(cp.getText().toString());\n tvJava.setText(java.getText().toString());\n pieChart.addPieSlice(\n new PieModel(\'R\',(float) Double.parseDouble(tvR.getText().toString()),Color.parseColor(\'#FFA726\')));\n pieChart.addPieSlice(\n new PieModel(\'Python\',(float) Double.parseDouble(tvPython.getText().toString()),Color.parseColor(\'#66BB6A\')));\n pieChart.addPieSlice(\n new PieModel(\'C++\',(float) Double.parseDouble(tvCPP.getText().toString()),Color.parseColor(\'#EF5350\')));\n pieChart.addPieSlice(\n new PieModel(\'Java\',(float) Double.parseDouble(tvJava.getText().toString()),Color.parseColor(\'#29B6F6\')));\n pieChart.startAnimation();]]></string>
    <string name="chart_para3">We have seen that data can be represented graphically in Android by using a basic line graph and the BarChart implementation. A point graph series is an additional graphical format for data representation. We will examine how the Point Graph Series is implemented in Android in this article.</string>
    <string name="chart_para4"><![CDATA[implement dependancy\n\nimplementation (\'com.jjoe64:graphview:4.2.2\') activity_main.xml\n\n <com.jjoe64.graphview.GraphView\n android:id=\'@+id/idGraphView\'\n android:layout_width=\'@dimen/_250sdp\'\n android:layout_height=\'@dimen/_250sdp\'\n android:layout_marginVertical=\'@dimen/_10ssp\'\n android:layout_gravity=\'center\'/>\n MainActivity.java\n\npublic class PointChart extends AppCompatActivity {\n @SuppressLint(\'MissingInflatedId\')\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_point_chart);\n GraphView graphView = findViewById(R.id.idGraphView);\n PointsGraphSeries<DataPoint> series = new PointsGraphSeries<>(getDataPoint());\n graphView.addSeries(series);\n graphView.getViewport().setScrollable(true);\n graphView.getViewport().setScalable(true);\n graphView.getViewport().setScalableY(true);\n graphView.getViewport().setScrollableY(true);\n series.setShape(PointsGraphSeries.Shape.POINT);\n series.setSize(12);\n series.setColor(Color.GREEN);}\n private DataPoint[] getDataPoint() {\n DataPoint[] dataPoints = new DataPoint[]{\n new DataPoint(0, 1),\n new DataPoint(1, 2),\n new DataPoint(2, 3),\n new DataPoint(3, 5),\n new DataPoint(4, 1),\n new DataPoint(4, 3),\n new DataPoint(5, 3),\n new DataPoint(6, 2)};\n return dataPoints;}\n]]></string>
    <string name="chart_para5">We\'ve seen how to make a stunning bar chart in Android, but what if we need to use groups to represent data in our bar chart? in order for us to plot a set of data in our bar chart. Therefore, in this article, we will create a Group Bar Chart in our Android app.</string>
    <string name="chart_para6"><![CDATA[Implement Dependancy\n\nimplementation\n(\'com.github.PhilJay:MPAndroidChart:v3.1.0\')\n\nactivity_main.xml\n\n<com.github.mikephil.charting.charts.BarChart\n android:id=\'@+id/idBarChart\'\n android:layout_width=\'411dp\'\n android:layout_height=\'628dp\'\n android:layout_alignParentStart=\'true\'\n android:layout_alignParentTop=\'true\'\n android:layout_marginStart=\'-2dp\'\n android:layout_marginTop=\'1dp\' />\n\n MainActivity.java\n\n public class MainActivity extends AppCompatActivity {\n BarChart barChart;\n BarDataSet barDataSet1, barDataSet2;\n ArrayList barEntries;\n String[] days = new String[]{\'Sunday\', \'Monday\', \'Tuesday\', \'Thursday\', \'Friday\', \'Saturday\'};\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n barChart = findViewById(R.id.idBarChart);\n barDataSet1 = new BarDataSet(getBarEntriesOne(), \'First Set\');\n barDataSet1.setColor(getApplicationContext().getResources().getColor(R.color.purple_200));\n barDataSet2 = new BarDataSet(getBarEntriesTwo(), \'Second Set\');\n barDataSet2.setColor(Color.BLUE);\n BarData data = new BarData(barDataSet1, barDataSet2);\n barChart.setData(data);\n barChart.getDescription().setEnabled(false);\n XAxis xAxis = barChart.getXAxis();\n xAxis.setValueFormatter(new IndexAxisValueFormatter(days));\n xAxis.setCenterAxisLabels(true);\n xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);\n xAxis.setGranularity(1);\n xAxis.setGranularityEnabled(true);\n barChart.setDragEnabled(true);\n barChart.setVisibleXRangeMaximum(3);\n float barSpace = 0.1f;\n float groupSpace = 0.5f;\n data.setBarWidth(0.15f);\n barChart.getXAxis().setAxisMinimum(0);\n barChart.animate();\n barChart.groupBars(0, groupSpace, barSpace);\n barChart.invalidate();}\n private ArrayList<BarEntry> getBarEntriesOne() {\n barEntries = new ArrayList<>();\n barEntries.add(new BarEntry(1f, 4));\n barEntries.add(new BarEntry(2f, 6));\n barEntries.add(new BarEntry(3f, 8));\n barEntries.add(new BarEntry(4f, 2));\n barEntries.add(new BarEntry(5f, 4));\n barEntries.add(new BarEntry(6f, 1));\n return barEntries;}\n private ArrayList<BarEntry> getBarEntriesTwo() {\n barEntries = new ArrayList<>();\n barEntries.add(new BarEntry(1f, 8));\n barEntries.add(new BarEntry(2f, 15));\n barEntries.add(new BarEntry(3f, 4));\n barEntries.add(new BarEntry(4f, 13));\n barEntries.add(new BarEntry(5f, 7));\n barEntries.add(new BarEntry(8f, 10));\n return barEntries;}\n }]]></string>
    <string name="chart_para7">We have shown that data may be represented graphically in Android by utilising a basic line graph and the BarChart implementation. A point graph series is an additional graphical format for data representation. We will examine how the Point Graph Series is implemented in Android in this article.</string>
    <string name="chart_para8"><![CDATA[Implement Dependancy\n\n implementation (\'com.jjoe64:graphview:4.2.2\')\n\n activity_main.xml\n\n <com.jjoe64.graphview.GraphView\n android:id=\'@+id/idGraphView\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\' />\n\n MainActivity.java\n\n public class PointChart extends AppCompatActivity {\n @SuppressLint(\'MissingInflatedId\')\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_point_chart);\n GraphView graphView = findViewById(R.id.idGraphView);\n PointsGraphSeries<DataPoint> series = new PointsGraphSeries<>(getDataPoint());\n graphView.addSeries(series);\n graphView.getViewport().setScrollable(true);\n graphView.getViewport().setScalable(true);\n graphView.getViewport().setScalableY(true);\n graphView.getViewport().setScrollableY(true);\n series.setShape(PointsGraphSeries.Shape.POINT);\n series.setSize(12);\n series.setColor(Color.GREEN);}\n private DataPoint[] getDataPoint() {\n DataPoint[] dataPoints = new DataPoint[]{\n new DataPoint(0, 1),\n new DataPoint(1, 2),\n new DataPoint(2, 3),\n new DataPoint(3, 5),\n new DataPoint(4, 1),\n new DataPoint(4, 3),\n new DataPoint(5, 3),\n new DataPoint(6, 2)};\n return dataPoints;}\n }\n]]></string>
    <string name="btn_para5">In essence, ToggleButton is an on/off or stop/play button with an indicator light that shows the button\'s current state. There are many applications for toggle buttons, including hotspots, Bluetooth, WiFi, and on/off audio. This belongs to the Composite Button subclass.\nFrom the Settings menu on their phone, users can toggle between two states using ToggleButton, such as turning on or off Bluetooth, WiFi, and other features. Switches are a different kind of toggle button that allow the user to control sliders since Android 4.0 (API level 14).</string>
    <string name="btn_para6"><![CDATA[activity_main.xml\n\n<ToggleButton\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:background=\'@drawable/shape\'\n android:layout_gravity=\'center\'\n android:backgroundTint=\'#45BFA3\'\n android:layout_marginVertical=\'@dimen/_10sdp\'\n android:textSize=\'@dimen/_12ssp\'\n android:textStyle=\'bold\'\n android:textColor=\'#BC8181\'\n />]]></string>
    <string name="btn_para7">The Android ImageButton is a user interface widget that displays buttons with images and functions just like buttons when we click on them. The only difference is that in this case, the image button has an image instead of text. Android offers a variety of button types, including ImageButton and ToggleButton.</string>
    <string name="btn_para8"><![CDATA[activity_main.xml\n\n<ImageButton\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:src=\'@mipmap/youtube\'\n android:id=\'@+id/imagebtn\'\n android:layout_gravity=\'center\'\n android:layout_marginVertical=\'@dimen/_10sdp\'\n />\n\n MainActivity.java\n\n btn = findViewById(R.id.imagebtn);\n btn.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View v) {\n Toast.makeText(ButtonsActivity.this, \'ImageButton\', Toast.LENGTH_SHORT).show();}\n });]]></string>
    <string name="mda_para1">EditText is a crucial component of the user interface. The term \'edittext\' describes a widget that shows a blank text field where users can type the necessary text to be used later in the application. This article discusses the implementation of a unique class of text fields known as Material Design EditTexts. Take a look at the Android Material Design Text fields and Normal Edit Text. They differ from standard EditText fields in that they are designed to be user-friendly.</string>
    <string name="mda_para2"><![CDATA[activity_main.xml\n\nMaterial Edittext<com.google.android.material.textfield.TextInputLayout\n android:id=\'@+id/filledTextField\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_marginStart=\'32dp\'\n android:layout_marginTop=\'64dp\'\n android:layout_marginEnd=\'32dp\'\n android:hint=\'Enter something\'>\n <com.google.android.material.textfield.TextInputEditText\n android:id=\'@+id/edit_text\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\' />\n </com.google.android.material.textfield.TextInputLayout>\n\n EditText with helpertext\n <com.google.android.mateial.textfield.TextInputLayout\n android:id=\'@+id/filled_edit_text\'\n style=\'@style/ShapeAppearance.App.SmallComponent\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_marginStart=\'16dp\'\n android:layout_marginTop=\'16dp\'\n android:layout_marginEnd=\'16dp\'\n android:hint=\'Enter Something\'\n app:helperText=\'Enter in text format only\'>\n <com.google.android.material.textfield.TextInputEditText\n android:id=\'@+id/name\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\' />\n </com.google.android.material.textfield.TextInputLayout>\n\n Edittext with Icon\n <com.google.android.material.textfield.TextInputLayout\n android:id=\'@+id/outline_edit_text\'\n style=\'@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\'\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:layout_marginTop=\'16dp\'\n android:hint=\' Enter Password\'\n app:endIconMode=\'password_toggle\'\n app:helperText=\'Enter in text format only\'\n app:startIconDrawable=\'@drawable/ic_vpn_key_black_24dp\'>\n <com.google.android.material.textfield.TextInputEditText\n android:layout_width=\'match_parent\'\n android:id=\'@+id/upass\'\n android:layout_height=\'wrap_content\'\n android:inputType=\'number\' />\n </com.google.android.material.textfield.TextInputLayout> res/style.xml\n\n <?xml version=\'1.0\' encoding=\'utf-8\'?>\n <resources xmlns:tools=\'http://schemas.android.com/tools\'>\n <style name=\'AppTheme\' parent=\'Theme.MaterialComponents.Light.DarkActionBar\'>\n <item name=\'colorPrimary\'>@color/colorPrimary</item>\n <item name=\'colorPrimaryDark\'>@color/colorPrimaryDark</item>\n <item name=\'colorAccent\'>@color/colorAccent</item>\n <item name=\'colorOnSurface\'>@color/colorPrimaryDark</item>\n <item name=\'textAppearanceSubtitle1\'>@style/TextAppearance.App.Subtitle1</item>\n <item name=\'textAppearanceCaption\'>@style/TextAppearance.App.Caption</item>\n <item name=\'shapeAppearanceSmallComponent\'>@style/ShapeAppearance.App.SmallComponent</item>\n </style>\n <style name=\'TextAppearance.App.Subtitle1\' parent=\'TextAppearance.MaterialComponents.Subtitle1\'>\n <item name=\'fontFamily\'>sans-serif-condensed</item>\n <item name=\'android:fontFamily\'>sans-serif-condensed</item>\n </style>\n <style name=\'TextAppearance.App.Caption\' parent=\'TextAppearance.MaterialComponents.Caption\'>\n <item name=\'fontFamily\'>sans-serif-black</item>\n <item name=\'android:fontFamily\'>sans-serif-black</item>\n </style>\n <style name=\'ShapeAppearance.App.SmallComponent\' parent=\'ShapeAppearance.MaterialComponents.SmallComponent\'>\n <item name=\'cornerFamily\'>cut</item>\n <item name=\'cornerSize\'>10dp</item>\n </style>\n <style name=\'Cut\' parent=\'ShapeAppearance.MaterialComponents.MediumComponent\'>\n <item name=\'cornerFamily\'>cut</item>\n <item name=\'cornerSize\'>12dp</item>\n </style>\n <style name=\'Rounded\' parent=\'ShapeAppearance.MaterialComponents.SmallComponent\'>\n <item name=\'cornerFamily\'>rounded</item>\n <item name=\'cornerSize\'>16dp</item>\n </style>\n </resources>]]></string>
    <string name="mda_para3">Developers and designers have an option to incorporate Material Design into their Android applications with Material Design Components (MDC Android). These components, which were created by a core group of Google engineers and UX designers, allow for a dependable development process to create stunning and useful Android applications.</string>
    <string name="mda_para4"><![CDATA[activity_main.xml\n\n<Button\n android:layout_width=\'300sp\'\n android:layout_gravity=\'center_horizontal\'\n android:layout_height=\'wrap_content\'\n android:textSize=\'20sp\'\n android:layout_marginTop=\'20sp\'\n android:text=\'Normal Button\'/>\n <Button\n android:id=\'@+id/outlined_button\'\n style=\'@style/Widget.MaterialComponents.Button.OutlinedButton.Icon\'\n android:textSize=\'20sp\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_gravity=\'center_horizontal\'\n android:text=\'Outlined Button\'\n android:textAllCaps=\'false\'/>\n <Button\n android:id=\'@+id/text_button\'\n android:textSize=\'20sp\'\n style=\'@style/Widget.MaterialComponents.Button.TextButton\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_gravity=\'center_horizontal\'\n android:text=\'Text Button\'\n android:textAllCaps=\'false\'/>\n <com.google.android.material.button.MaterialButtonToggleGroup\n android:id=\'@+id/toggleButton\'\n android:layout_width=\'wrap_content\'\n android:layout_marginStart=\'50sp\'\n android:layout_height=\'wrap_content\'>\n <Button\n android:id=\'@+id/button1\'\n style=\'?attr/materialButtonOutlinedStyle\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Button 1\' />\n <Button\n android:id=\'@+id/button2\'\n style=\'?attr/materialButtonOutlinedStyle\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Button 2\' />\n <Button\n android:id=\'@+id/button3\'\n style=\'?attr/materialButtonOutlinedStyle\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Button 3\' />\n </com.google.android.material.button.MaterialButtonToggleGroup>\n <androidx.constraintlayout.widget.ConstraintLayout\n android:layout_width=\'wrap_content\'\n android:layout_marginStart=\'120sp\'\n android:layout_height=\'wrap_content\'>\n <com.google.android.material.button.MaterialButtonToggleGroup\n android:id=\'@+id/materialButtonToggleGroup\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n app:layout_constraintBottom_toBottomOf=\'parent\'\n app:layout_constraintEnd_toEndOf=\'parent\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\'>\n <Button\n android:id=\'@+id/bold_button\'\n style=\'@style/Widget.App.Button.OutlinedButton.IconOnly\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n app:icon=\'@drawable/ic_format_bold_black_24dp\' />\n <Button\n android:id=\'@+id/italic_button\'\n style=\'@style/Widget.App.Button.OutlinedButton.IconOnly\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n app:icon=\'@drawable/ic_format_underlined_black_24dp\' />\n <Button\n android:id=\'@+id/underline_button\'\n style=\'@style/Widget.App.Button.OutlinedButton.IconOnly\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n app:icon=\'@drawable/ic_format_italic_black_24dp\' />\n </com.google.android.material.button.MaterialButtonToggleGroup>\n\n res/style.xml\n\n <style name=\'AppTheme\' parent=\'Theme.MaterialComponents.DayNight.DarkActionBar\'>\n <item name=\'colorPrimary\'>@color/colorPrimary</item>\n <item name=\'colorPrimaryDark\'>@color/colorPrimaryDark</item>\n <item name=\'colorAccent\'>@color/colorAccent</item>\n <item name=\'textAppearanceButton\'>@style/TextAppearance.App.Button</item>\n <item name=\'shapeAppearanceSmallComponent\'>@style/ShapeAppearance.App.SmallComponent</item>\n </style>\n <style name=\'TextAppearance.App.Button\' parent=\'TextAppearance.MaterialComponents.Button\'>\n <item name=\'fontFamily\'>sans-serif-black</item>\n <item name=\'android:fontFamily\'>sans-serif</item>\n <item name=\'android:textSize\'>18sp</item>\n </style>\n <style name=\'ShapeAppearance.App.SmallComponent\' parent=\'ShapeAppearance.MaterialComponents.SmallComponent\'>\n <item name=\'cornerFamily\'>cut</item>\n <item name=\'cornerSize\'>18dp</item>\n </style>\n <style name=\'Widget.App.Button.OutlinedButton.IconOnly\'\n parent=\'Widget.MaterialComponents.Button.OutlinedButton\'>\n <item name=\'iconPadding\'>0dp</item>\n <item name=\'android:insetTop\'>0dp</item>\n <item name=\'android:insetBottom\'>0dp</item>\n <item name=\'android:paddingLeft\'>12dp</item>\n <item name=\'android:paddingRight\'>12dp</item>\n <item name=\'android:minWidth\'>48dp</item>\n <item name=\'android:minHeight\'>48dp</item>\n </style>\n <style name=\'myCustomContainedButton\' parent=\'Widget.MaterialComponents.Button\'>\n <item name=\'shapeAppearance\'>@style/customContainedButtonTheme</item>\n <item name=\'android:textAppearance\'>@style/myCustomTextForMaterialButtons</item>\n </style>\n <style name=\'customContainedButtonTheme\'>\n <item name=\'cornerFamily\'>rounded</item>\n <item name=\'cornerSize\'>24dp</item>\n </style>\n <style name=\'myCustomOutlinedButton\' parent=\'Widget.MaterialComponents.Button.OutlinedButton\'>\n <item name=\'shapeAppearance\'>@style/customOutlinedButtonTheme</item>\n </style>\n <style name=\'customOutlinedButtonTheme\'>\n <item name=\'cornerFamily\'>cut</item>\n <item name=\'cornerSize\'>12dp</item>\n </style>\n <style name=\'myCustomTextForMaterialButtons\'>\n <item name=\'fontFamily\'>sans-serif-condensed-medium</item>\n <item name=\'android:textSize\'>18sp</item>\n <item name=\'android:fontFamily\'>sans-serif</item>\n </style>]]></string>
    <string name="mda_para5">Developers and designers have an option to incorporate Material Design into their Android applications with Material Design Components (MDC Android). These components, which were created by a core group of Google engineers and UX designers, allow for a dependable development process to create stunning and useful Android applications. This is a set of instructions that must be followed in order to obtain Google Material Design Components (MDC) Date Picker, one of the amazing user interface elements from Google Material Design Components for Android. Numerous Open Source date pickers are available for Android users.</string>
    <string name="mda_para6"><![CDATA[activity_main.xml\n\n <TextView\n android:id=\'@+id/show_selected_date\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_gravity=\'center\'\n android:layout_marginStart=\'132dp\'\n android:layout_marginTop=\'96dp\'\n android:text=\'Selected Date is : \'\n android:textSize=\'18sp\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\' />\n <Button\n android:id=\'@+id/pick_date_button\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:layout_gravity=\'center\'\n android:layout_marginTop=\'141dp\'\n android:text=\'Select Date\'\n android:textSize=\'18sp\'\n app:icon=\'@drawable/ic_format_bold_black_24dp\'\n app:layout_constraintEnd_toEndOf=\'parent\'\n app:layout_constraintStart_toStartOf=\'parent\'\n app:layout_constraintTop_toTopOf=\'parent\' />\n MainActivivty.java\n\n mPickDateButton = findViewById(R.id.pick_date_button);\n mShowSelectedDateText = findViewById(R.id.show_selected_date);\n MaterialDatePicker.Builder<Pair<Long, Long>> materialDateBuilder = MaterialDatePicker.Builder.dateRangePicker();\n materialDateBuilder.setTitleText(\'SELECT A DATE\');\n final MaterialDatePicker materialDatePicker = materialDateBuilder.build();\n mPickDateButton.setOnClickListener(\n new View.OnClickListener() {\n @Override\n public void onClick(View v) {\n materialDatePicker.show(getSupportFragmentManager(), \'MATERIAL_DATE_PICKER\');}\n });\n materialDatePicker.addOnPositiveButtonClickListener(\n new MaterialPickerOnPositiveButtonClickListener() {\n @Override\n public void onPositiveButtonClick(Object selection) {\n mShowSelectedDateText.setText(\'Selected Date is : \' + materialDatePicker.getHeaderText());}\n });]]></string>
    <string name="anim_para1">The process of giving any view, image, or text a motion effect is called animation. An animation can be used to add motion or alter the shape of a particular view. In Android, animation is typically used to create a rich user interface. There are essentially three categories for the animations:\n\n1.Property Animation\n2.View Animation\n3.Drawable Animation\n\n1. Property Animation\n Property Animation is one of the robust frameworks which allows animation almost everything. This is one of the powerful and flexible animations which was introduced in Android 3.0. Property animation can be used to add any animation in the CheckBox, RadioButtons, and widgets other than any view.\n 2. View Animation\n View Animation can be used to add animation to a specific view to perform tweened animation on views. Tweened animation calculates animation information such as size, rotation, start point, and endpoint. These animations are slower and less flexible. An example of View animation can be used if we want to expand a specific layout in that place we can use View Animation. The example of View Animation can be seen in Expandable RecyclerView.\n 3. Drawable Animation\n Drawable Animation is used if you want to animate one image over another. The simple way to understand is to animate drawable is to load the series of drawable one after another to create an animation. A simple example of drawable animation can be seen in many apps Splash screen on apps logo animation.</string>
    <string name="anim_para2"><![CDATA[Implementation Dependancy\n implementation (\'com.tomer:fadingtextview:2.5\')\n\n activity_main.xml\n\n<View\n android:id=\'@+id/perform\'\n android:layout_width=\'200sp\'\n android:layout_height=\'100sp\'\n android:layout_alignParentStart=\'true\'\n android:layout_alignParentTop=\'true\'\n android:layout_centerHorizontal=\'true\'\n android:layout_marginStart=\'108dp\'\n android:layout_marginTop=\'70dp\'\n android:background=\'@drawable/view_bg\' />\n <ScrollView\n android:layout_width=\'match_parent\'\n android:layout_height=\'700dp\'\n android:layout_alignParentStart=\'true\'\n android:layout_alignParentTop=\'true\'\n android:layout_marginTop=\'175dp\'\n android:orientation=\'vertical\'>\n <LinearLayout\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'\n android:orientation=\'vertical\'>\n <TextView\n android:layout_width=\'match_parent\'\n android:layout_height=\'match_parent\'\n android:text=\'Attention\'\n android:textSize=\'20sp\'\n android:padding=\'5sp\'\n android:layout_margin=\'5sp\'/>\n <LinearLayout\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:orientation=\'horizontal\'>\n <androidx.appcompat.widget.AppCompatButton\n android:id=\'@+id/t1\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Bounce\'\n android:layout_margin=\'5sp\'\n android:background=\'@drawable/b1\'\n android:textSize=\'17sp\'/>\n <androidx.appcompat.widget.AppCompatButton\n android:id=\'@+id/t2\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Flash\'\n android:layout_margin=\'5sp\'\n android:background=\'@drawable/b2\'\n android:textSize=\'17sp\'/>\n <androidx.appcompat.widget.AppCompatButton\n android:id=\'@+id/t3\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Pluse\'\n android:layout_margin=\'5sp\'\n android:background=\'@drawable/b3\'\n android:textSize=\'17sp\'/>\n <androidx.appcompat.widget.AppCompatButton\n android:id=\'@+id/t4\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Ruberband\'\n android:layout_margin=\'5sp\'\n android:background=\'@drawable/b4\'\n android:textSize=\'17sp\'/>\n </LinearLayout>\n <LinearLayout\n android:layout_width=\'match_parent\'\n android:layout_height=\'wrap_content\'\n android:orientation=\'horizontal\'>\n <androidx.appcompat.widget.AppCompatButton\n android:id=\'@+id/t5\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Shake\'\n android:layout_margin=\'5sp\'\n android:background=\'@drawable/b2\'\n android:textSize=\'17sp\'/>\n <androidx.appcompat.widget.AppCompatButton\n android:id=\'@+id/t6\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Stand Up\'\n android:layout_margin=\'5sp\'\n android:background=\'@drawable/b3\'\n android:textSize=\'17sp\'/>\n <androidx.appcompat.widget.AppCompatButton\n android:id=\'@+id/t7\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Swing\'\n android:layout_margin=\'5sp\'\n android:background=\'@drawable/b1\'\n android:textSize=\'17sp\'/>\n <androidx.appcompat.widget.AppCompatButton\n android:id=\'@+id/t8\'\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Tada\'\n android:layout_margin=\'5sp\'\n android:background=\'@drawable/b4\'\n android:textSize=\'17sp\'/>\n </LinearLayout>\n </ScrollView>\n </RelativeLayout>\n\n MainActivity.java\n\n private ActivityMainBinding binding;\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n binding = ActivityMainBinding.inflate(getLayoutInflater());\n setContentView(binding.getRoot());\n Render render = new Render(MainActivity.this);\n binding.t1.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View v) {\n render.setAnimation(Attention.Bounce(binding.perform));\n render.start();}\n });\n binding.t2.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View v) {\n render.setAnimation(Attention.Flash(binding.perform));\n render.start();}\n });\n binding.t3.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View v) {\n render.setAnimation(Attention.Pulse(binding.perform));\n render.start();}\n });\n binding.t4.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View v) {\n render.setAnimation(Attention.RuberBand(binding.perform));\n render.start();}\n });\n binding.t5.setOnClickListener(new View.OnClickListener() {\n @Override\n public void onClick(View v) {\n render.setAnimation(Attention.Shake(binding.perform));\n render.start();}\n });\n\n Same as to All]]></string>
    <string name="home_para1">Android is an open-source operating system primarily designed for mobile devices such as smartphones and tablets. It was originally developed by Android Inc., a company that Google acquired in 2005. Since its inception, Android has grown to become the most widely used mobile operating system in the world, powering billions of devices across various manufacturers. Its flexibility, extensive application ecosystem, and deep integration with Google services have made it a dominant force in the mobile industry.</string>
    <string name="home_para2">One of the standout features of Android is its open-source nature. Based on the Linux kernel, Android\'s source code is freely available for anyone to use, modify, and distribute. This openness has encouraged a broad and diverse developer community to innovate and create a wide range of applications and customizations. Manufacturers can tailor the OS to their specific hardware, enabling them to differentiate their devices in a competitive market.</string>
    <string name="home_para3">The customization capabilities of Android are another major advantage. Users can personalize their devices with different themes, widgets, and launchers, creating a unique user experience. The Google Play Store offers millions of applications, covering every conceivable category from productivity tools to games, enhancing the functionality and versatility of Android devices. This extensive application ecosystem is a key factor in Android\'s widespread adoption.</string>
    <string name="home_para4">Android\'s evolution through various versions has introduced significant enhancements and new features. Starting with Android 1.0 in 2008, which included basic functionalities, the OS has continuously improved with each iteration. Notable versions include Android 4.0 Ice Cream Sandwich, which unified the user interface for both smartphones and tablets, and Android 5.0 Lollipop, which introduced Material Design, a comprehensive redesign of the user interface. More recent versions like Android 10 and Android 11 have focused on privacy, security, and user experience, introducing features such as dark mode, enhanced notifications, and improved permission controls.\n\nEach version of Android is typically named after a dessert in alphabetical order, a tradition that continued until Android 10, which marked a shift to a numerical naming convention. This practice not only made it easier for users to remember different versions but also added a playful aspect to the software\'s development.</string>
    <string name="home_para5">The development ecosystem around Android is robust and well-supported. Android Studio, the official integrated development environment (IDE), provides powerful tools for coding, testing, and debugging applications. Developers predominantly use Java or Kotlin, with Kotlin becoming the preferred language due to its modern syntax and compatibility with Java. The extensive libraries and frameworks available for Android streamline common tasks such as UI design, data storage, and network communication, enabling developers to focus on building innovative applications.\n\nThe Android community is large and active, with numerous forums, user groups, and conferences where developers can share knowledge and collaborate. Google\'s extensive documentation and support resources further facilitate the development process, ensuring that both novice and experienced developers can create high-quality applications.</string>
    <string name="home_para6">Android has significantly impacted the mobile technology landscape through its flexibility, extensive application ecosystem, and seamless integration with Google services. Its open-source nature has fostered innovation and customization, making it a preferred choice for both consumers and developers. As Android continues to evolve, it remains committed to improving performance, security, and user experience, ensuring its position as a leading mobile operating system in an ever-changing technological environment.</string>
    <string name="navi_para1">The navigation drawer is the most common feature offered by android and the navigation drawer is a UI panel that shows your app’s main navigation menu. It is also one of the important UI elements, which provides actions preferable to the users, for example changing user profile, changing settings of the application, etc. In this article, it has been discussed step by step to implement the navigation drawer in android. The code has been given in both Java and Kotlin Programming Language for Android.</string>
    <string name="navi_para2"><![CDATA[MainActivity.java\n\npublic class NavigationDrawerEx extends AppCompatActivity implements\n SlidingDrawer.OnDrawerCloseListener{\n DrawerLayout drawerLayout;\n ActionBarDrawerToggle drawerToggle;\n NavigationView navigationView;\n private Toolbar toolbar;\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_navigation_drawer_ex);\n navigationView = findViewById(R.id.navigation);\n toolbar = findViewById(R.id.home_toolbar);\n setSupportActionBar(toolbar);\n ActionBar actionBar = getSupportActionBar();\n if (actionBar != null) {\n actionBar.setTitle(\'\');}\n drawerLayout = (DrawerLayout) findViewById(R.id.my_drawer_layout);\n drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, toolbar,\n R.string.app_name, R.string.app_name);\n drawerToggle.setHomeAsUpIndicator(R.drawable.icon_nav);\n drawerLayout.setDrawerListener(drawerToggle);\n navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\n @Override\n public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n int id = item.getItemId();\n if(id == R.id.nav_home) {\n setContentView(R.layout.navigationdrawerfile);}\n return true;}\n });}\n @Override\n public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n if (drawerToggle.onOptionsItemSelected(item)) {\n return true;}\n return super.onOptionsItemSelected(item);}\n @Override\n public void onConfigurationChanged(@NonNull Configuration newConfig) {\n super.onConfigurationChanged(newConfig);\n drawerToggle.onConfigurationChanged(newConfig);}\n @Override\n public void onPostCreate(@Nullable Bundle savedInstanceState) {\n super.onPostCreate(savedInstanceState);\n drawerToggle.syncState();}\n @Override\n public boolean onCreateOptionsMenu(Menu menu) {\n return true;}\n @Override\n public void onBackPressed() {\n if (drawerLayout.isDrawerOpen(Gravity.LEFT | Gravity.RIGHT)) {\n drawerLayout.closeDrawers();\n return;}\n super.onBackPressed();}\n @Override\n public void onDrawerClosed() {\n if (drawerLayout.isDrawerOpen(Gravity.LEFT | Gravity.RIGHT)) {\n drawerLayout.closeDrawers();}}\n }\n\n activity_main.xml\n\n <com.google.android.material.navigation.NavigationView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'match_parent\'\n app:headerLayout=\'@layout/header\'\n android:layout_gravity=\'start\'\n app:menu=\'@menu/navigation_menu\'\n android:id=\'@+id/navigation\'\n />\n\n header.xml\n\n <?xml version=\'1.0\' encoding=\'utf-8\'?>\n <LinearLayout xmlns:android=\'http://schemas.android.com/apk/res/android\'\n android:layout_width=\'410sp\'\n android:layout_height=\'200sp\'\n android:padding=\'20sp\'\n android:background=\'#ED8888\'\n android:orientation=\'vertical\'\n android:gravity=\'bottom\'>\n <TextView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'Your Name\'\n android:textSize=\'30sp\'\n android:textStyle=\'bold\'/>\n <TextView\n android:layout_width=\'wrap_content\'\n android:layout_height=\'wrap_content\'\n android:text=\'weburl.com\'\n android:textSize=\'18sp\'\n android:textStyle=\'bold\'/>\n </LinearLayout>\n\n navigation_menu.xml\n\n <?xml version=\'1.0\' encoding=\'utf-8\'?>\n <menu xmlns:android=\'http://schemas.android.com/apk/res/android\'\n xmlns:tool=\'http://schemas.android.com/tools\'\n tool:showIn =\'navigation_view\'>\n <group\n android:checkableBehavior=\'single\'>\n <item\n android:id=\'@+id/nav_home\'\n android:title=\'Navigation Drawer Information\'\n android:icon=\'@drawable/icon_nav\'>\n </item>\n <item\n android:title=\'Attendance Track\'\n android:id=\'@+id/attend_track\'\n android:icon=\'@drawable/icon_nav\'>\n </item>\n <item\n android:title=\'QR Scan\'\n android:id=\'@+id/scan_qr\'\n android:icon=\'@drawable/icon_nav\'>\n </item>\n </group>\n <item android:title=\'General\'>\n <menu>\n <item android:title=\'Profile\'\n android:id=\'@+id/profile\'\n android:icon=\'@drawable/icon_nav\'/>\n <item android:title=\'Settings\'\n android:id=\'@+id/settings\'\n android:icon=\'@drawable/icon_nav\'/>\n </menu>\n </item>\n <item android:title=\'Communicate\'>\n <menu>\n <item\n android:title=\'How To Use\'\n android:icon=\'@drawable/icon_nav\'\n android:id=\'@+id/use\'/>\n <item\n android:title=\'Suggestions\'\n android:icon=\'@drawable/icon_nav\'\n android:id=\'@+id/sugg\'/>\n <item android:title=\'Share App\'\n android:icon=\'@drawable/icon_nav\'\n android:id=\'@+id/share\'/>\n </menu>\n </item>\n </menu>]]></string>

    <string-array name="spinner_items">
        <item>Select Topic</item>
        <item>Introduction of android</item>
        <item>History Of Android</item>
        <item>Android Architecture</item>
        <item>Folder/File Structure,Manifest</item>
        <item>Res/Values, Assets Folder</item>
        <item>Activity LifeCycle/Activity State Changes</item>
        <item>What is Context with example</item>
        <item>What is Bundle with example</item>
    </string-array>
    <string-array name="spinner_items1">
        <item>Select Topic</item>
        <item>Layouts</item>
        <item>Views</item>
        <item>Buttons</item>
    </string-array>
    <string-array name="spinner_items5">
        <item>Select Topic</item>
        <item>Linear Layout,Relative Layout,Constraint Layout,Absolute Layout,Frame Layout,Table Layout</item>
        <item>Navigation Drawer</item>
    </string-array>
    <string-array name="spinner_items6">
        <item>Select Topic</item>
        <item>TextView,EditText,ImageView,ListView,ScrollView,CardView</item>
        <item>WebView</item>
        <item>VideoView,SearchView</item>
        <item>Gallary View,BottomNavigationView</item>
    </string-array>
    <string-array name="spinner_items7">
        <item>Select Topic</item>
        <item>RadioButton,RadioGroup,ToggleButton,ImageButton</item>
        <item>Progress\Loading Button, Floating Action Button</item>
    </string-array>
    <string-array name="spinner_items2">
        <item>Select Topic</item>
        <item>Array Adapter,Simple Adapter</item>
        <item>SimpleExpandableListAdapter</item>
        <item>AdapterViewFlipper</item>
        <item>BaseExpandableAdapter</item>
    </string-array>
    <string-array name="spinner_items3">
        <item>Select Topic</item>
        <item>ActionBar,ToolBar,Seekbar,Discrete Seekbar,RatingBar,SnackBar,RangeSeekBar</item>
        <item>Pie Chart,Group BarChart,LineGraphView,PointView</item>
    </string-array>
    <string-array name="spinner_items4">
        <item>Select Topic</item>
        <item>Material EditText,Material Button,Material DatePicker</item>
        <item>Animations</item>
    </string-array>

</resources>